using Core;
using Core.Configuration;
using Core.DatabaseOps;
using Core.DataContracts.Requests;
using Core.DataContracts.Responses;
using Core.SYS_Classes;
using Core.SYS_Enums;
using Core.SYS_Interfaces;
using CoreInterfaces;
using CoreInterfaces.IDc;
using CoreInterfaces.IObjects;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NodaTime;
using NodaTime.Text;
using NSubstitute;
using SCImplementations;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MockTests
{
    [TestClass]
    public class UT_Validation
    {

        #region IValidationString

        #region Is_Valid_Email_Message

        [TestMethod]
        public void Validation_IsValidEmailMessage()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            string inputStr = "Test string";
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailMessageWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailMessageWithInputStrNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailMessageWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Email_Message(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_String

        [TestMethod]
        public void Validation_IsValidString()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string inputStr = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidStringWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidStringWithInputStrNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);


            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidStringWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Long_String

        [TestMethod]
        public void Validation_IsValidLongString()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidLongStringWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidLongStringWithInputStrNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidLongStringWithInputStrMorethan10000Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                                + "There are more than 10000 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Long_String(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_NameStr

        [TestMethod]
        public void Validation_IsValidNameStr()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string inputStr = "Test string";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNameStrWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNameStrWithInputStrNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNameStrWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_NameStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_DescriptionStr

        [TestMethod]
        public void Validation_IsValidDescriptionStr()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string inputStr = "Test string";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDescriptionStrWithInputStrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);



            string inputStr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDescriptionStrWithInputStrNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);


            string inputStr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDescriptionStrWithInputStrMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);


            string inputStr = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DescriptionStr(inputStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_EmailAddress
        [TestMethod]
        public void Validation_IsValidEmailAddress()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string email_addr = "xyz@gmail.com";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailAddressWithEmailAddrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string email_addr = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailAddressWithEmailAddrNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string email_addr = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailAddressWithEmailAddrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string email_addr = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_EmailAddress(email_addr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Known_Email_To_System
        [TestMethod]
        public void Validation_IsKnownEmailToSystem()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            string email_address = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockString.Is_Valid_EmailAddress(email_address).Returns(x =>
            {
                return true;
            });

            ITrueFalse is_known = mockCoreFactory.TrueFalse();

            is_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return is_known;
            });

            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, is_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithEmailAddressEmpty()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            string email_address = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse is_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, is_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithEmailAddressNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            string email_address = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse is_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, is_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithEmailAddressInvalid()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            string email_address = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse is_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, is_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsKnownEmailToSystemWithDBIsEmailKnownFail()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string email_address = "abc@gmail.com";

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse is_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Email_Known(mockCoreProject, email_address, is_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Known_Email_To_System(mockCoreProject, email_address, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Address_String

        [TestMethod]
        public void Validation_IsValidAddressString()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string address_line = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressStringWithAddressLineEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string address_line = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressStringWithAddressLineNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string address_line = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressStringWithAddressLineMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string address_line = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Address_String(address_line);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Appointment_Title

        [TestMethod]
        public void Validation_IsValidAppointmentTitle()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string appointmentTitle = "Test string";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTitleWithAppointmentTitleEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string appointmentTitle = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTitleWithAppointmentTitleNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string appointmentTitle = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTitleWithAppointmentTitleMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string appointmentTitle = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Title(appointmentTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Component_Name

        [TestMethod]
        public void Validation_IsValidComponentName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string component_name = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidComponentNameWithComponentNameEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string component_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidComponentNameWithComponentNameNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string component_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidComponentNameWithComponentNameMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string component_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_Name(component_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_CoreWebFile_String

        [TestMethod]
        public void Validation_IsValidCoreWebFileString()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string cwfileStr = "imgService";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CoreWebFile_String(cwfileStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCoreWebFileStringWithCwfileStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string cwfileStr = "img";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CoreWebFile_String(cwfileStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Customer_Company_Name

        [TestMethod]
        public void Validation_IsValidCustomerCompanyName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string customer_company_name = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerCompanyNameWithCustomerCompanyNameEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string customer_company_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerCompanyNameWithCustomerCompanyNameNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string customer_company_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerCompanyNameWithCustomerCompanyNameMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string customer_company_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Customer_Company_Name(customer_company_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_DateTime_String

        [TestMethod]
        public void Validation_IsValidDateTimeString()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            ValidationDates mockDatesObj = new ValidationDates();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDatesObj);

            Validation Validation = new Validation(mockBelong, mockDatesObj, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string str_date_time = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DateTime_String(str_date_time);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDateTimeStringWithInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            ValidationDates mockDatesObj = new ValidationDates();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDatesObj);

            Validation Validation = new Validation(mockBelong, mockDatesObj, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string str_date_time = DateTime.Now.ToString();
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DateTime_String(str_date_time);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_File_Extension

        [TestMethod]
        public void Validation_IsValidFileExtension()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string fileExtStr = "txt";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockStrings.Is_Valid_String(fileExtStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileExtensionWithFileExtStrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string fileExtStr = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileExtensionWithFileExtStrNull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string fileExtStr = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileExtensionWithFileExtStrMorethan4Char()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string fileExtStr = "There are more than 4 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Extension(fileExtStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_File_Name

        [TestMethod]
        public void Validation_IsValidFileName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string fileNameStr = "Test string";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockStrings.Is_Valid_String(fileNameStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileNameWithFileNameStrEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);



            string fileNameStr = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileNameWithFileNameStrNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string fileNameStr = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileNameWithFileNameMorethan90Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string fileNameStr = "There are more than 90 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_File_Name(fileNameStr, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_GUID_String

        [TestMethod]
        public void Validation_IsValidGuidStr()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_GUID_String(guidStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Notification_Message

        [TestMethod]
        public void Validation_IsValidNotificationMessage()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string notification_message = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationMessageWithNotificationMessageEmpty()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string notification_message = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationMessageWithNotificationMessageNull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string notification_message = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationMessageWithNotificationMessageMorethan1245Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string notification_message = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!"
                + "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Notification_Message(notification_message);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Organisation_Name

        [TestMethod]
        public void Validation_IsValidOrganisationName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string newOrgName = "Test OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrganisationNameWithNewOrgNameEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string newOrgName = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrganisationNameWithNewOrgNameNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string newOrgName = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrganisationNameWithNewOrgNameMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string newOrgName = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Organisation_Name(newOrgName);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Password

        [TestMethod]
        public void Validation_IsValidPassword()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string password = "TestPassword!@#";
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPasswordWithPasswordEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string password = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPasswordWithPasswordNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string password = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPasswordWithPasswordMorethan30Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string password = "There are more than 30 character in this password for testing it's functionality or Validation work correctly or not";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Password(password);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_Phone_Number

        [TestMethod]
        public void Validation_IsValidPhoneNumber()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = "123456789";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPhoneNumberWithPhoneNumberEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPhoneNumberWithPhoneNumberNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPhoneNumberWithPhoneNumberMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICountry mockCountry = Substitute.For<ICountry>();
            string phone_number = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Phone_Number(phone_number, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Post_Code
        [TestMethod]
        public void Validation_IsValidPostCode()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = "1234";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPostCodeWithPostCodeEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPostCodeWithPostCodeNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPostCodeWithPostCodeMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            ICountry mockCountry = Substitute.For<ICountry>();
            string post_code = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Post_Code(post_code, mockCountry);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Product_Name

        [TestMethod]
        public void Validation_IsValidProductName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string product_name = "Test string";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductNameWithProductNameEmpty()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string product_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductNameWithProductNameNull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string product_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductNameWithProductNameMorethan249Char()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string product_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Product_Name(product_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Resource_Name
        [TestMethod]
        public void Validation_IsValidResourceName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string resource_name = "Test Role Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceNameWithResourceNameEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string resource_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceNameWithResourceNameNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string resource_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceNameWithResourceNameMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string resource_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Name(resource_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Role_Name

        [TestMethod]
        public void Validation_IsValidRoleName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string role_name = "Test Role Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleNameWithRoleNameEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string role_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleNameWithNewRoleNameNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string role_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleNameWithRoleNameMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationString mockStringobj = new ValidationString();
            ValidationStrings mockStringsObj = new ValidationStrings(mockStringobj, mockDates);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string role_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Role_Name(role_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_SHA256_String

        [TestMethod]
        public void Validation_IsValidSHA256String()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_SHA256_String(sha256);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidSHA256StringWithSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string sha256 = "ba";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_SHA256_String(sha256);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Tag_Name

        [TestMethod]
        public void Validation_IsValidTagName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string categorie_name = "Test Category";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTagNameWithCategorieNameEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string categorie_name = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTagNameWithCategorieNameNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string categorie_name = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTagNameWithCategorieNameMorethan249Char()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string categorie_name = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Tag_Name(categorie_name);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_TimeZoneIANA

        [TestMethod]
        public void Validation_IsValidTimeZoneIANA()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string timeZoneStr = "America/Boise";


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeZoneIANA(timeZoneStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTimeZoneIANAWithTimeZoneIANANull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string timeZoneStr = null;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeZoneIANA(timeZoneStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTimeZoneIANAWithTimeZoneIANAEmpty()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            string timeZoneStr = string.Empty; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TimeZoneIANA(timeZoneStr);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #endregion

        #region IValidationInterfaces

        #region Is_Valid_RepeatParams

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeUnknown()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationString mockString = Substitute.For<IValidationString>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockString, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Unknown;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeDaily()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatDay = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeDailyZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem,  mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatDay = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeWeekly()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Weekly;
            mockRepeatOptions.repeatWeek = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeWeeklyZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Weekly;
            mockRepeatOptions.repeatWeek = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeMonthly()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem,mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Monthly;
            mockRepeatOptions.repeatMonth = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeMonthlyZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Monthly;
            mockRepeatOptions.repeatMonth = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeYearly()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Yearly;
            mockRepeatOptions.repeatYear = 1;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);



            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_Is_ValidRepeatParamsWithRepeatTypeYearlyZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationInterfaces mockInterfacesObj = new ValidationInterfaces(mockNumbers);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfacesObj, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Yearly;
            mockRepeatOptions.repeatYear = 0;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid_RepeatParams(mockRepeatOptions, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #endregion

        #region IValidationNumbers

        #region Is_Valid_MsDuration

        [TestMethod]
        public void Validation_IsValidMsDuration()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            long durationInMs = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MsDuration(durationInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMsDurationWithDurationInMsInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
           
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            long durationInMs = 1209600002;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MsDuration(durationInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMsDurationWithDurationInMsMinuseValue()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            long durationInMs = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MsDuration(durationInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Categorie_ID

        [TestMethod]
        public void Validation_IsValidCategorieID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
           
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int categorie_id = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Categorie_ID(mockCoreProject, categorie_id, orgId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Currency

        [TestMethod]
        public void Validation_IsValidCurrency()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int value = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Currency(value);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCurrencyWithInvalid()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int value = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Currency(value);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Max_Decimal_Places_2

        [TestMethod]
        public void Validation_IsMaxDecimalPlaces2()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            decimal dec = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Max_Decimal_Places_2(dec);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Appointment_ID

        [TestMethod]
        public void Validation_IsValidAppointmentID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse appointment_known = mockCoreFactory.TrueFalse();
            appointment_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return appointment_known;
            });


            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, appointment_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentIDWithAppointmentIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse appointment_known = mockCoreFactory.TrueFalse();

            int appointmentId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, appointment_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentIDWithAppointmentIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse appointment_known = mockCoreFactory.TrueFalse();

            Int32 appointmentId = int.MaxValue;
            appointmentId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, appointment_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentIDWithDBIsAppointmentIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse appointment_known = mockCoreFactory.TrueFalse();

            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, appointment_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Appointment_ID(mockCoreProject, appointmentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Animal_ID

        [TestMethod]
        public void Validation_IsValidAnimalID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse animalKnown = mockCoreFactory.TrueFalse();

            animalKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return animalKnown;
            });

            int animalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId, animalKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAnimalIDWithMedicalRecordIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int animalId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse animalKnown = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId, animalKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAnimalIDWithMedicalRecordIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse animalKnown = mockCoreFactory.TrueFalse();
            Int32 animalId = int.MaxValue;
            animalId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId, animalKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAnimalIDWithDBIsAnimalIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse animalKnown = mockCoreFactory.TrueFalse();

            int animalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Animal_ID_Known(mockCoreProject, animalId,  animalKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Animal_ID(mockCoreProject, animalId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_MedicalRecord_ID

        [TestMethod]
        public void Validation_IsValidMedicalRecordID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int medicalRecordId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse medicalRecordKnown = mockCoreFactory.TrueFalse();


            medicalRecordKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return medicalRecordKnown;
            });

            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId,  medicalRecordKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalRecordIDWithMedicalRecordIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse medicalRecordKnown = mockCoreFactory.TrueFalse();
            int medicalRecordId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId,  medicalRecordKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalRecordIDWithMedicalRecordIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse medicalRecordKnown = mockCoreFactory.TrueFalse();

            
            Int32 medicalRecordId = int.MaxValue;
            medicalRecordId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId,  medicalRecordKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalRecordIDWithDBIsMedicalRecordIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse medicalRecordKnown = mockCoreFactory.TrueFalse();


            int medicalRecordId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalRecord_ID_Known(mockCoreProject, medicalRecordId,  medicalRecordKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_MedicalRecord_ID(mockCoreProject, medicalRecordId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_MedicalNote_ID

        [TestMethod]
        public void Validation_IsValidMedicalNoteID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse medicalNoteKnown = mockCoreFactory.TrueFalse();

            medicalNoteKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return medicalNoteKnown;
            });

            int medicalNoteId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId,  medicalNoteKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalNoteIDWithMedicalNoteIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse medicalNoteKnown = mockCoreFactory.TrueFalse();

            int medicalNoteId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId, medicalNoteKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalNoteIDWithMedicalNoteIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            ITrueFalse medicalNoteKnown = mockCoreFactory.TrueFalse();

            Int32 medicalNoteId = int.MaxValue;
            medicalNoteId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId,  medicalNoteKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMedicalNoteIDWithDBIsMedicalNoteIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse medicalNoteKnown = mockCoreFactory.TrueFalse();


            int medicalNoteId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_MedicalNote_ID_Known(mockCoreProject, medicalNoteId,  medicalNoteKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_MedicalNote_ID(mockCoreProject, medicalNoteId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_InvoiceableItem_ID

        [TestMethod]
        public void Validation_IsValidInvoiceableItemID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
           
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int invoiceableItemId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse invoiceableItemKnown = mockCoreFactory.TrueFalse();
            invoiceableItemKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return invoiceableItemKnown;
            });

            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, invoiceableItemKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceableItemIDWithInvoiceableItemIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse invoiceableItemKnown = mockCoreFactory.TrueFalse();
            int invoiceableItemId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, invoiceableItemKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceableItemIDWithInvoiceableItemIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse invoiceableItemKnown = mockCoreFactory.TrueFalse();
            Int32 invoiceableItemId = int.MaxValue;
            invoiceableItemId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, invoiceableItemKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceableItemIDWithDBIsInvoiceableItemIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse invoiceableItemKnown = mockCoreFactory.TrueFalse();

            int invoiceableItemId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_InvoiceableItem_ID_Known(mockCoreProject, invoiceableItemId, invoiceableItemKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_InvoiceableItem_ID(mockCoreProject, invoiceableItemId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Notification_ID

        [TestMethod]
        public void Validation_IsValidNotificationID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int notificationId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse notificationIdKnown = mockCoreFactory.TrueFalse();

            notificationIdKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return notificationIdKnown;
            });

            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId,  notificationIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationIDWithNotificationIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse notificationIdKnown = mockCoreFactory.TrueFalse();

            int notificationId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId, notificationIdKnown).Returns(x =>
            {
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationIDWithNotificationIDGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse invoiceableItemKnown = mockCoreFactory.TrueFalse();

            Int32 notificationId = int.MaxValue;
            notificationId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId,  invoiceableItemKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidNotificationIDWithDBIsNotificationIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            
            int notificationId = 1;

            ITrueFalse invoiceableItemKnown = mockCoreFactory.TrueFalse();


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Notification_ID_Known(mockCoreProject, notificationId,  invoiceableItemKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Notification_ID(mockCoreProject, notificationId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_TSO_Id

        [TestMethod]
        public void Validation_IsValidTSOId()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse tso_known = mockCoreFactory.TrueFalse();

            tso_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return tso_known;
            });

            int tso_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id,  tso_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTSOIdWithTSOIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse tso_known = mockCoreFactory.TrueFalse();
            int tso_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id, tso_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTSOIdWithTSOIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse tso_known = mockCoreFactory.TrueFalse();
            Int32 tso_id = int.MaxValue;
            tso_id += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id,  tso_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTSOIdWithDBIsTSOIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse tso_known = mockCoreFactory.TrueFalse();
            int tso_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TSO_ID_Known(mockCoreProject, tso_id, tso_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, tso_id, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_Email_To_Send_ID
        [TestMethod]
        public void Validation_IsValidEmailToSendID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int email_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse email_known = mockCoreFactory.TrueFalse();
            email_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return email_known;
            });

            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id,  email_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Email_To_Send_ID(mockCoreProject, email_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailToSendIDWithEmailIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid); 


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse email_known = mockCoreFactory.TrueFalse();
            int email_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id,  email_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TSO_Id(mockCoreProject, email_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailToSendIDWithEmailIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            ITrueFalse email_known = mockCoreFactory.TrueFalse();
            Int32 email_id = int.MaxValue;
            email_id += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id, email_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Email_To_Send_ID(mockCoreProject, email_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailToSendIDWithDBIsEmailToSendIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse email_known = mockCoreFactory.TrueFalse();
            int email_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Email_To_Send_ID_Known(mockCoreProject, email_id, email_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Email_To_Send_ID(mockCoreProject, email_id, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Exception_ID

        [TestMethod]
        public void Validation_IsValidExceptionID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse exception_known = mockCoreFactory.TrueFalse();

            exception_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return exception_known;
            });



            int exception_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id, exception_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionIDWithExceptionIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse exception_known = mockCoreFactory.TrueFalse();

            int exception_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id,  exception_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionIDWithExceptionIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse exception_known = mockCoreFactory.TrueFalse();

            Int32 exception_id = int.MaxValue;
            exception_id += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id, exception_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionIDWithDBIsEmailToSendIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse exception_known = mockCoreFactory.TrueFalse();

            int exception_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exception_id, exception_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_Role_ID

        [TestMethod]
        public void Validation_IsValidRoleID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse role_id_known = mockCoreFactory.TrueFalse();

            role_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return role_id_known;
            });

            int role_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, role_id, role_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Role_ID(mockCoreProject, role_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleIDWithRoleIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse role_id_known = mockCoreFactory.TrueFalse();

            int role_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, role_id, role_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Role_ID(mockCoreProject, role_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRoleIDWithDBIsRoleIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse role_id_known = mockCoreFactory.TrueFalse();
            int role_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, role_id, role_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Role_ID(mockCoreProject, role_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Invoice_ID
        [TestMethod]
        public void Validation_IsValidInvoiceID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

           

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int invoiceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse Invoice_id_known = mockCoreFactory.TrueFalse();

            Invoice_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return Invoice_id_known;
            });

            mockCoreDb.DB_Is_Invoice_ID_Known(mockCoreProject, invoiceId,  Invoice_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Invoice_ID(mockCoreProject, invoiceId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceIDWithInvoiceIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse Invoice_id_known = mockCoreFactory.TrueFalse();

            int invoiceId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Invoice_ID_Known(mockCoreProject, invoiceId,  Invoice_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Invoice_ID(mockCoreProject, invoiceId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidInvoiceIDWithDBIsInvoiceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse Invoice_id_known = mockCoreFactory.TrueFalse();

            int invoiceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Invoice_ID_Known(mockCoreProject, invoiceId, Invoice_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Invoice_ID(mockCoreProject, invoiceId, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------+

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion      

        #region Is_Valid_Product_ID

        [TestMethod]
        public void Validation_IsValidProductID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int productId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse productIdKnown = mockCoreFactory.TrueFalse();

            productIdKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return productIdKnown;
            });

            mockCoreDb.DB_Is_Product_ID_Known(mockCoreProject, productId, productIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Product_ID(mockCoreProject, productId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductIDWithProductIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse productIdKnown = mockCoreFactory.TrueFalse();

            int productId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Product_ID_Known(mockCoreProject, productId, productIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Product_ID(mockCoreProject, productId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidProductIDWithDBIsProductIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse productIdKnown = mockCoreFactory.TrueFalse();

            int productId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Product_ID_Known(mockCoreProject, productId, productIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Product_ID(mockCoreProject, productId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Payment_ID
        [TestMethod]
        public void Validation_IsValidPaymentID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int PaymentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse paymentIdKnown = mockCoreFactory.TrueFalse();
            paymentIdKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return paymentIdKnown;
            });

            mockCoreDb.DB_Is_Payment_ID_Known(mockCoreProject, PaymentId, paymentIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Payment_ID(mockCoreProject, PaymentId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPaymentIDWithPaymentIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse paymentIdKnown = mockCoreFactory.TrueFalse();

            int PaymentId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Payment_ID_Known(mockCoreProject, PaymentId,  paymentIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Payment_ID(mockCoreProject, PaymentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPaymentIDWithDBIsProductIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse paymentIdKnown = mockCoreFactory.TrueFalse();

            int PaymentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Payment_ID_Known(mockCoreProject, PaymentId, paymentIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Payment_ID(mockCoreProject, PaymentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceFulfilmentConfigID

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigID mockServiceFulfilmentConfigID = Substitute.For<IServiceFulfilmentConfigID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigID.serviceFulfilmentConfigId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigID.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceFulfilmentConfigID, typeof(IServiceFulfilmentConfigID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigID_IsBelongingToOrg()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigID mockServiceFulfilmentConfigID = Substitute.For<IServiceFulfilmentConfigID>();

            mockServiceFulfilmentConfigID.serviceFulfilmentConfigId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigID.serviceFulfilmentConfigId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceFulfilmentConfigID, typeof(IServiceFulfilmentConfigID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigID_IsValidServiceFulfilmentConfigIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigID mockServiceFulfilmentConfigID = Substitute.For<IServiceFulfilmentConfigID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigID.serviceFulfilmentConfigId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigID.serviceFulfilmentConfigId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceFulfilmentConfigID, typeof(IServiceFulfilmentConfigID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigResourceMapID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse serviceFulfilmentConfigResMapKnown = mockCoreFactory.TrueFalse();
            serviceFulfilmentConfigResMapKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return serviceFulfilmentConfigResMapKnown;
            });

            int serviceFulfilmentConfigResMapId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_Resource_Map_ID_Known(mockCoreProject, serviceFulfilmentConfigResMapId,  serviceFulfilmentConfigResMapKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, serviceFulfilmentConfigResMapId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigResourceMapIDWithServiceFulfilmentConfigResMapIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int serviceFulfilmentConfigResMapId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse serviceFulfilmentConfigResMapKnown = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_ServiceFulfilmentConfig_Resource_Map_ID_Known(mockCoreProject, serviceFulfilmentConfigResMapId, serviceFulfilmentConfigResMapKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, serviceFulfilmentConfigResMapId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceFulfilmentConfigResourceMapIDWithDBIsServiceFulfilmentConfigResourceMapIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse serviceFulfilmentConfigResMapKnown = mockCoreFactory.TrueFalse();

            int serviceFulfilmentConfigResMapId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_Resource_Map_ID_Known(mockCoreProject, serviceFulfilmentConfigResMapId,  serviceFulfilmentConfigResMapKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, serviceFulfilmentConfigResMapId, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_TempPaypalID

        [TestMethod]
        public void Validation_IsValidTempPaypalID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int tempPaypalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse tempPaypalIdKnown = mockCoreFactory.TrueFalse();

            tempPaypalIdKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return tempPaypalIdKnown;
            });

            mockCoreDb.DB_Is_TempPaypal_ID_Known(mockCoreProject, tempPaypalId, tempPaypalIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TempPaypalID(mockCoreProject, tempPaypalId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTempPaypalIDWithTempPaypalIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse tempPaypalIdKnown = mockCoreFactory.TrueFalse();
            int tempPaypalId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TempPaypal_ID_Known(mockCoreProject, tempPaypalId, tempPaypalIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_TempPaypalID(mockCoreProject, tempPaypalId, mockCoreDb,mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTempPaypalIDWithDBIsTempPaypalIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse tempPaypalIdKnown = mockCoreFactory.TrueFalse();
            int tempPaypalId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_TempPaypal_ID_Known(mockCoreProject, tempPaypalId,  tempPaypalIdKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_TempPaypalID(mockCoreProject, tempPaypalId, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_ID

        [TestMethod]
        public void Validation_IsValidRepeatID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersObj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersObj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int repeat_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse repeat_id_known = mockCoreFactory.TrueFalse();

            repeat_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return repeat_id_known;
            });

            mockCoreDb.DB_Is_Repeat_ID_Known(mockCoreProject, repeat_id,  repeat_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Repeat_ID(mockCoreProject, repeat_id, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatIDWithRepeatIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse repeat_id_known = mockCoreFactory.TrueFalse();
            int repeat_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Repeat_ID_Known(mockCoreProject, repeat_id, repeat_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Repeat_ID(mockCoreProject, repeat_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatIDWithDBIsRepeatIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse repeat_id_known = mockCoreFactory.TrueFalse();
            int repeat_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Repeat_ID_Known(mockCoreProject, repeat_id,  repeat_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Repeat_ID(mockCoreProject, repeat_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_User_ID

        [TestMethod]
        public void Validation_IsValidUserID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();

            user_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return user_id_known;
            });

            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidUserIDWithUserIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            int user_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidUserIDWithDBIsUserIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidUserIDWithUserIdEqualSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            int user_id = GeneralConfig.SYSTEM_WILDCARD_INT;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Org_ID

        [TestMethod]
        public void Validation_IsValidOrgID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();

            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            orgId_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return orgId_known;
            });
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgIDWithOrgIdZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgIDWithOrgIdGreaterThanMaxValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            Int32 orgId = int.MaxValue;
            orgId += 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgIDWithDBIsOrgIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Valid_Categorie_Type_ID
        [TestMethod]
        public void Validation_IsValidCategorieTypeID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int categorie_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Categorie_Type_ID(mockCoreProject, categorie_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCategorieTypeIDWithCategorieTypeIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int categorie_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Categorie_Type_ID(mockCoreProject, categorie_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Resource_Type_ID

        [TestMethod]
        public void Validation_IsValidResourceTypeID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int resource_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Type_ID(resource_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceTypeIDWithResourceTypeIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int resource_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Resource_Type_ID(resource_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Appointment_Type_ID

        [TestMethod]
        public void Validation_IsValidAppointmentTypeID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int appointment_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Type_ID(appointment_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTypeIDWithAppointmentTypeIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int appointment_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Type_ID(appointment_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAppointmentTypeIDWithAppointmentTypeIDUnknown()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int appointment_type_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Appointment_Type_ID(appointment_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Exception_Type_ID

        [TestMethod]
        public void Validation_IsValidExceptionTypeID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int exception_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Type_ID(exception_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTypeIDWithExceptionTypeIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int exception_type_id = 5;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Type_ID(exception_type_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Resource_ID

        [TestMethod]
        public void Validation_IsValidResourceID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int resource_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            res_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return res_id_known;
            });

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id,  res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Resource_ID(mockCoreProject, resource_id, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceIDWithResourceIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();
            int resource_id = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id,  res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Resource_ID(mockCoreProject, resource_id, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceIDWithDBIsResourceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();
            int resource_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id,  res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Resource_ID(mockCoreProject, resource_id, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_ServiceOrder_ID

        [TestMethod]
        public void Validation_IsValidServiceOrderID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse serviceOrder_id_known = mockCoreFactory.TrueFalse();

            serviceOrder_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return serviceOrder_id_known;
            });

            int serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            

            mockCoreDb.DB_Is_ServiceOrder_ID_Known(mockCoreProject, serviceOrderId, serviceOrder_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });



            bool returnValue = Validation.Is_Valid_ServiceOrder_ID(mockCoreProject, serviceOrderId, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceOrderIDWithServiceIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse serviceOrder_id_known = mockCoreFactory.TrueFalse();

            int serviceOrderId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceOrder_ID_Known(mockCoreProject, serviceOrderId,  serviceOrder_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_ServiceOrder_ID(mockCoreProject, serviceOrderId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceOrderIDWithDBIsServiceOrderIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse serviceOrder_id_known = mockCoreFactory.TrueFalse();
            int serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_ServiceOrder_ID_Known(mockCoreProject, serviceOrderId,  serviceOrder_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_ServiceOrder_ID(mockCoreProject, serviceOrderId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion
        
        #region Is_Valid_Contact_ID

                [TestMethod]
        public void Validation_IsValidContactID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            int contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse contact_id_known = mockCoreFactory.TrueFalse();
            contact_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return contact_id_known;
            });

            mockCoreDb.DB_Is_Contact_ID_Known(mockCoreProject, contactId, contact_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Contact_ID(mockCoreProject, contactId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidContactIDWithContactIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse contact_id_known = mockCoreFactory.TrueFalse();

            int contactId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Contact_ID_Known(mockCoreProject, contactId, contact_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Contact_ID(mockCoreProject, contactId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidContactIDWithDBIsContactIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse contact_id_known = mockCoreFactory.TrueFalse();

            int contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Contact_ID_Known(mockCoreProject, contactId,  contact_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Contact_ID(mockCoreProject, contactId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Service_ID

        [TestMethod]
        public void Validation_IsValidServiceID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse service_id_known = mockCoreFactory.TrueFalse();

            service_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return service_id_known;
            });

            mockCoreDb.DB_Is_Service_ID_Known(mockCoreProject, serviceId, service_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Service_ID(mockCoreProject, serviceId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceIDWithServiceIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ITrueFalse service_id_known = mockCoreFactory.TrueFalse();
            int serviceId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Service_ID_Known(mockCoreProject, serviceId,  service_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Service_ID(mockCoreProject, serviceId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceIDWithDBIsServiceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse service_id_known = mockCoreFactory.TrueFalse();
            int serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Service_ID_Known(mockCoreProject, serviceId,  service_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Service_ID(mockCoreProject, serviceId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Platform_Service_ID

        [TestMethod]
        public void Validation_IsValidPlatformServiceID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int platformserviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse platform_id_known = mockCoreFactory.TrueFalse();
            platform_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return platform_id_known;
            });

            mockCoreDb.DB_Is_Platform_Service_ID_Known(mockCoreProject, platformserviceId, platform_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Platform_Service_ID(mockCoreProject, platformserviceId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPlatformServiceIDWithPlatformServiceIDZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse platform_id_known = mockCoreFactory.TrueFalse();


            int platformserviceId = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Platform_Service_ID_Known(mockCoreProject, platformserviceId,  platform_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Platform_Service_ID(mockCoreProject, platformserviceId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPlatformServiceIDWithDBIsPlatformServiceIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse platform_id_known = mockCoreFactory.TrueFalse();

            int platformserviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockCoreDb.DB_Is_Platform_Service_ID_Known(mockCoreProject, platformserviceId, platform_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Platform_Service_ID(mockCoreProject, platformserviceId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Customer_ID
        [TestMethod]
        public void Validation_IsValidCustomerID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            
            int orgId = 1;
            int customer_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();
            org_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return org_id_known;
            });

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, customer_id, DB_Base.DBTable_Org_Contact_Table, DB_Base.DBTable_Org_Contact_Table_orgId, DB_Base.DBTable_Org_Contact_Table_ID, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Customer_ID(mockCoreProject, orgId, customer_id, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCustomerIDWithDBIsOrgIDKnownDBFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int customer_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, customer_id, DB_Base.DBTable_Org_Contact_Table, DB_Base.DBTable_Org_Contact_Table_orgId, DB_Base.DBTable_Org_Contact_Table_ID,  orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Customer_ID(mockCoreProject, orgId, customer_id, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidCustomerIDWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int customer_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, customer_id, DB_Base.DBTable_Org_Contact_Table, DB_Base.DBTable_Org_Contact_Table_orgId, DB_Base.DBTable_Org_Contact_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Customer_ID(mockCoreProject, orgId, customer_id, mockCoreSc, mockCoreDb, mockCoreFactory);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Repeat_WeekDay

        [TestMethod]
        public void Validation_IsValidRepeatWeekDays()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            List<int> weekDayNums = new List<int>();
            int weekDayNum = 1;
            weekDayNums.Add(weekDayNum);

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNums);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDaysNumInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            List<int> weekDayNums = new List<int>();
            int weekDayNum = 9;
            weekDayNums.Add(weekDayNum);

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNums);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDaysNumsNull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            List<int> weekDayNums = new List<int>();
            weekDayNums = null;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNums);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_WeekDay

        [TestMethod]
        public void Validation_IsValidWeekDay()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekDayNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekDayWithWeekDayNumZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekDayNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekDayWithWeekDayNumInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekDayNum = 8;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Week

        [TestMethod]
        public void Validation_IsValidRepeatWeek()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekWithWeekNumZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekWithWeekNumInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekNum = 6;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Week

        [TestMethod]
        public void Validation_IsValidWeek()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekWithWeekNumZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWeekWithWeekNumInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekNum = 6;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Week(weekNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Day

        [TestMethod]
        public void Validation_IsValidDay()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int day = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDayWithDayZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int day = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDayWithWeekNumInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int day = 32;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Limit

        [TestMethod]
        public void Validation_IsValidRepeatLimit()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int limit = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Limit(limit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatLimitWithLimitZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int limit = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Limit(limit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatLimitWithLimitMAXREPEATOCCURANCE()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int limit = GeneralConfig.MAX_REPEAT_OCCURANCES;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Limit(limit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Day

        [TestMethod]
        public void Validation_IsValidRepeatDay()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int day = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatDayWithDayZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int day = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatDayWithDayInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int day = 32;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Day(day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Type

        [TestMethod]
        public void Validation_IsValidRepeatType()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int repeatType = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatTypeWithRepeatTypeZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int repeatType = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_MonthDay

        [TestMethod]
        public void Validation_IsValidMonthDay()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int year = 2017;
            int month = 1;
            int day = 31;



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MonthDay(year, month, day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMonthDayWithDayZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int year = 2017;
            int month = 1;
            int day = 0;



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MonthDay(year, month, day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        public void Validation_IsValidMonthDayWithDayInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);


            int year = 2017;
            int month = 1;
            int day = 32;



            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MonthDay(year, month, day);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Month

        [TestMethod]
        public void Validation_IsValidRepeatMonth()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int month = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatMontWithMonthZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int month = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatMonthWithMonthInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int month = 13;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Month

        [TestMethod]
        public void Validation_IsValidMonth()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int month = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMonthWithMonthZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int month = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMonthWithMonthInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem,mockIsValid);

            int month = 13;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Month(month);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Year

        [TestMethod]
        public void Validation_IsValidRepeatYear()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int year = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatYearWithYearZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int year = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatYearWithYearInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int year = 31;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Year

        [TestMethod]
        public void Validation_IsValidYear()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int year = 1970;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidYearWithMonthZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int year = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidYearWithYearInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int year = 2051;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Year(year);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_Modifier

        [TestMethod]
        public void Validation_IsValidRepeatModifier()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int modifier = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Modifier(modifier);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatModifierWithModifierZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int modifier = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Modifier(modifier);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatModifierWithModifierInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int modifier = 31;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Modifier(modifier);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Calendar_ID

        [TestMethod]
        public void Validation_IsValidCalendarID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse calendar_known = mockCoreFactory.TrueFalse();

            calendar_known.isTrue = true;

            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return calendar_known;
            });

            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, calendar_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCalendarIDWithCalendarIdZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int calendarId = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse calendar_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, calendar_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCalendarIDWithCalendarIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int calendarId = int.MaxValue;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse calendar_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, calendar_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCalendarIDWithDBIsCalendarIDKnownDBFail()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse calendar_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, calendar_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_File_ID

        [TestMethod]
        public void Validation_IsValidFileID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse fileId_known = mockCoreFactory.TrueFalse();

            fileId_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return fileId_known;
            });

            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, fileId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileIDWithFileIDZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int fileId = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse fileId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, fileId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileIDWithFileIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int fileId = int.MaxValue;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse fileId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, fileId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFileIDWithDBIsFileIDKnownDBFail()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse fileId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, fileId, fileId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_File_ID(mockCoreProject, fileId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Latitude

        [TestMethod]
        public void Validation_IsValidLatitude()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();           
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            double latitudeToTest = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Latitude(latitudeToTest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Longitude

        [TestMethod]
        public void Validation_IsValidLongitude()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();           
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            double longitudeToTest = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Latitude(longitudeToTest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Component_ID

        [TestMethod]
        public void Validation_IsValidComponentID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int componentId = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Component_ID(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_TaxRate

        [TestMethod]
        public void Validation_IsValidTaxRate()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            decimal componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateWithComponentIdLessThanZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            decimal componentId = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateWithComponentIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            decimal componentId = 100000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_TaxRate

        [TestMethod]
        public void Validation_IsValidTaxRateByLongWithComponentId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateByLongWithComponentIdLessThanZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long componentId = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTaxRateByLongWithComponentIdWithComponentIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long componentId = 100000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_TaxRate(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Price

        [TestMethod]
        public void Validation_IsValidPrice()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();           
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Price(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPriceWithComponentIdLessThanZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();           
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long componentId = -1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Price(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPriceWithComponentIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long componentId = 10000000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Price(componentId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_SearchRange

        [TestMethod]
        public void Validation_IsValidSearchRange()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int rangeLimitInMeters = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_SearchRange(rangeLimitInMeters);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Future_Duration

        [TestMethod]
        public void Validation_IsValidFutureDuration()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long futureTimeInMs = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Future_Duration(futureTimeInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFutureDurationWithFutureTimeInMsLessThanZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            long futureTimeInMs = -1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Future_Duration(futureTimeInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidFutureDurationWithFutureTimeInInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            long futureTimeInMs = GeneralConfig.MAX_RESOURCE_FUTURE_TIME_MS + 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Future_Duration(futureTimeInMs);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Address_ID

        [TestMethod]
        public void Validation_IsValidAddressID()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int addressId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            
            ITrueFalse addressIsKnown = mockCoreFactory.TrueFalse();

            addressIsKnown.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return addressIsKnown;
            });


            mockCoreDb.DB_Is_ID_Known(mockCoreProject, addressId, DB_Base.DBTable_Org_Address_Table, DB_Base.DBTable_Org_Address_Table_ID, addressIsKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Address_ID(mockCoreProject, addressId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidAddressIDWithDBIsIDKnownDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int addressId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse addressIsKnown = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_ID_Known(mockCoreProject, addressId, DB_Base.DBTable_Org_Address_Table, DB_Base.DBTable_Org_Address_Table_ID, addressIsKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Address_ID(mockCoreProject, addressId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Radius

        [TestMethod]
        public void Validation_IsValidRadius()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int radius = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Radius(radius);
             //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRadiusWithRadiusZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int radius = 0;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Radius(radius);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRadiusWithRadiusInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int radius = 100000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Radius(radius);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Service_Cost

        [TestMethod]
        public void Validation_IsValidServiceCost()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            decimal costAmount = 1;
            ENUM_SYS_CurrencyOption currencyValue = ENUM_SYS_CurrencyOption.USD;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            decimal newCurrcency = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockUtils.CONVERT_Currency(costAmount, currencyValue, GeneralConfig.DEFAULT_SYSTEM_CURRENCY, out newCurrcency).Returns(x =>
            {
                x[3] = newCurrcency;
                return true;
            });

            bool returnValue = Validation.Is_Valid_Service_Cost(costAmount, currencyValue, mockCoreSc);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_ContactType

        [TestMethod]
        public void Validation_IsValidContactType()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int contactType = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_ContactType(contactType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidContactTypeWithContactTypeOne()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int contactType = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_ContactType(contactType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_User_Title

        [TestMethod]
        public void Validation_IsValidUserTitle()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int userTitle = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_User_Title(userTitle);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidUserTitleWithUserTitleOne()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int userTitle = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_User_Title(userTitle);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Time_AllocationType

        [TestMethod]
        public void Validation_IsValidTimeAllocationType()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int slotLimit = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Time_AllocationType(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidTimeAllocationTypeWithSlotLimitOne()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            int slotLimit = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Time_AllocationType(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Daily_User_Slot_Limit

        [TestMethod]
        public void Validation_IsValidDailyUserSlotLimit()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            long slotLimit = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Daily_User_Slot_Limit(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDailyUserSlotLimitWithSlotLimitLessThanZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            long slotLimit = -1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Daily_User_Slot_Limit(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidDailyUserSlotLimitWithSlotLimitInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            long slotLimit = 101;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Daily_User_Slot_Limit(slotLimit);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_MoneyAmount

        [TestMethod]
        public void Validation_IsValidMoneyAmount()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            decimal moneyVal = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MoneyAmount(moneyVal);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyAmountWithMoneyValGreaterThanMAXMONEYVALUE()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            decimal moneyVal = GeneralConfig.MAX_MONEY_VALUE + 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_MoneyAmount(moneyVal);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Repeat_WeekDay

        [TestMethod]
        public void Validation_IsValidRepeatWeekDay()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekDayNum = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDayNumInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekDayNum = 8;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatWeekDayWithWeekDayNumZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            int weekDayNum = 0;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_WeekDay(weekDayNum);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Resource_ID_List

        [TestMethod]
        public void Validation_IsValidResourceIDList()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            //ICoreProject coreProject, List<int> resourceList, int orgId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            int orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse wasValid = mockCoreFactory.TrueFalse();
            wasValid.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return wasValid;
            });

            mockCoreDb.DB_Is_Resource_ID_Known_To_Org(mockCoreProject, mockCoreDb, orgId, resId,  wasValid).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid_Resource_ID_List(mockCoreProject, resourceList, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidResourceIDListWithDBIsResourceIDKnownToOrgDBFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            //ICoreProject coreProject, List<int> resourceList, int orgId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            int orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse wasValid = mockCoreFactory.TrueFalse();

            wasValid.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return wasValid;
            });

            mockCoreDb.DB_Is_Resource_ID_Known_To_Org(mockCoreProject, mockCoreDb, orgId, resId,  wasValid).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid_Resource_ID_List(mockCoreProject, resourceList, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_MoneyValue

        [TestMethod]
        public void Validation_IsValidMoneyValue()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValue.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyValueWithMonetaryCurrencyUnknown()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockMoneyValue.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyValueWithMonetaryAmountLessThanZero()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();            
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValue.monetaryAmount = -1;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidMoneyValueWithMonetaryAmountMAXMONEYUSDVALUE()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationNumbers mockNumbersobj = new ValidationNumbers();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbersobj, mockStrings, mockSystem, mockIsValid);

            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();

            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValue.monetaryAmount = GeneralConfig.MAX_MONEY_USD_VALUE;


            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_MoneyValue(mockMoneyValue);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion



        #endregion

        #region IValidationEnums

        #region Is_Valid_Apply_To

        [TestMethod]
        public void Validation_IsValidApplyTo()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationEnums validationEnumsObj = new ValidationEnums();

            Validation Validation = new Validation(mockBelong, mockDates, validationEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ENUM_Repeat_Apply_To applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Apply_To(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidApplyToWithApplyToUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            ValidationEnums validationEnumsObj = new ValidationEnums();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, validationEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ENUM_Repeat_Apply_To applyTo = ENUM_Repeat_Apply_To.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Apply_To(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_CountryLocation

        [TestMethod]
        public void Validation_IsValidCountryLocation()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            ValidationEnums validationEnumsObj = new ValidationEnums();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, validationEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            Enum_SYS_Country_Location countryLocation = Enum_SYS_Country_Location.USA;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CountryLocation(countryLocation);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidCountryLocationWithCountryLocationUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationEnums validationEnumsObj = new ValidationEnums();

            Validation Validation = new Validation(mockBelong, mockDates, validationEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            Enum_SYS_Country_Location countryLocation = Enum_SYS_Country_Location.Unknown;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_CountryLocation(countryLocation);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Gender

        [TestMethod]
        public void Validation_IsValidGender()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationEnums validationEnumsObj = new ValidationEnums();
            Validation Validation = new Validation(mockBelong, mockDates, validationEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ENUM_Gender gender = ENUM_Gender.female;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Gender(gender);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidGenderWithGenderUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationEnums validationEnumsObj = new ValidationEnums();
            Validation Validation = new Validation(mockBelong, mockDates, validationEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ENUM_Gender gender = ENUM_Gender.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Gender(gender);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        //#region Is_Valid_Repeat_Type

        //[TestMethod]
        //public void Validation_IsValidRepeatType()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();

        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
        //    ValidationEnums validationEnumsObj = new ValidationEnums();

        //    Validation Validation = new Validation(mockBelong, mockDates, validationEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem);
        //    int repeatType = 2;

        //    // ---------- Arrange--------------

        //    //----------- Act -----------------

        //    bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(true, returnValue);

        //    //---------- Assert----------------
        //}

        //[TestMethod]
        //public void Validation_IsValidRepeatTypeWithRepeatTypeZero()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();

        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

        //    ValidationEnums mockEnumsobj = new ValidationEnums();
        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnumsobj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem);
        //    int repeatType = 0;

        //    // ---------- Arrange--------------

        //    //----------- Act -----------------

        //    bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(false, returnValue);

        //    //---------- Assert----------------
        //}

        //#endregion

        #endregion

        #region IValidationSystem

        #region Is_Valid_PageRequest

        [TestMethod]
        public void Validation_IsValidPageRequest()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPageRequestWithPagingStartLessThanZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = -1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPageRequestWithPagingStopLessThanZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = -1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidPageRequestWithpagingStopLessThanPagingStart()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            mockPageRequest.pagingStart = 3;
            mockPageRequest.pagingStop = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_PageRequest(mockPageRequest);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Valid_Login

        [TestMethod]
        public void Validation_IsValidLogin()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();



            string username = "abc@gmail.com";
            string password = "123";

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Valid_Login(mockCoreProject, username, password, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Permissions_User_Can_Do_System_Action

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemAction()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readAllCreated;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdReadMaxRender()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readMaxRender;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdCreateOrg()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.createOrg;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdReadAllUserOrganisations()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readAllUserOrganisations;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithActionIdUnknown()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            int userId = 1;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoSystemActionWithWithUserIdEqualSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            int userId = GeneralConfig.SYSTEM_WILDCARD_INT;

            ENUM_SYS_Action action_id = ENUM_SYS_Action.readAllUserOrganisations;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_System_Action(userId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Activation_String_Valid
        [TestMethod]
        public void Validation_IsActivationStringValid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

           

            IDcEmailAddress mockDcEmailAddress = Substitute.For<IDcEmailAddress>();
            
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = "abc@gmail.com";
            
            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });

            mockCoreFactory.DcEmailAddress(mockCoreProject).Returns(x =>
            {
                return mockDcEmailAddress;
            });
            String activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email, activationStr).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreFactory.StringObj().Returns(x =>
            {
                return activationStr;
            });

            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithUserEmailEmpty()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = string.Empty;


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email,  activationStr).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithUserEmailNull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = null;


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email,  activationStr).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithUserReadActivationStringDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = "abc@gmail.com";


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = "IsActive";
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email,  activationStr).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsActivationStringValidWithActivationStrEmpty()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            string user_email = "abc@gmail.com";


            int user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, user_id).Returns(x =>
            {
                return user_email;
            });
            String activationStr;
            activationStr = string.Empty;
            mockCoreDb.User_Read_Activation_String(mockCoreProject, user_email,  activationStr).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Activation_String_Valid(mockCoreProject, user_id, activationStr, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Permissions_User_Can_Do_Core_Action

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreAction()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();


            int userId = 1;
            int orgId = 1;
            int roleId = 1;


            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------



            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, mockOrgReadMember).Returns(x =>
            {
                mockOrgReadMember.userId = 1;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId,  mockOrgReadOwner).Returns(x =>
            {

                mockOrgReadOwner.userId = 2;
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId,  role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId,  permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId,  listOfOrgCreatedContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId,  listOfOrgMemberContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            mockBelong.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });


            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            int count = 0;
            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            List<ENUM_Core_Function> all_permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            int countSecond = 0;
            mockCoreFactory.ListENUMCoreFunction().Returns(x =>
            {
                if (countSecond == 0)
                {
                    return permission_actions;
                }
                else {
                    return all_permission_actions;
                }
            });

            IDcRoleId mockDcRoleId = Substitute.For<IDcRoleId>();

            mockCoreFactory.DcRoleId(mockCoreProject).Returns(x =>
            {
                return mockDcRoleId;
            });
            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , userId, orgId, action_id);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithUserIdSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);




            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = GeneralConfig.SYSTEM_WILDCARD_INT;

            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory  , userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadOrgOwnerUserSameUserId()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);



            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            int userId = 1;
            int orgId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId,  mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId,  mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 1;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            int count = 0;

            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadMemberDBFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();




            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;

            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId,  mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId,  mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 2;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId,  role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId,  permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
              
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadOrgOwnerUserDBFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;


            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId,  mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId,  mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 2;
                
                return ENUM_DB_Status.DB_FAIL;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId,  role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
              
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            int count = 0;
            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            List<ENUM_Core_Function> all_permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            int countSecond = 0;
            mockCoreFactory.ListENUMCoreFunction().Returns(x =>
            {
                if (countSecond == 0)
                {
                    return permission_actions;
                }
                else
                {
                    return all_permission_actions;
                }
            });

            IDcRoleId mockDcRoleId = Substitute.For<IDcRoleId>();

            mockCoreFactory.DcRoleId(mockCoreProject).Returns(x =>
            {
                return mockDcRoleId;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadRoleMappingIDsForUserDBFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;

            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId,  mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId,  mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 2;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId,  role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId,  permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
              
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            int count = 0;
            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            List<ENUM_Core_Function> all_permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            int countSecond = 0;
            mockCoreFactory.ListENUMCoreFunction().Returns(x =>
            {
                if (countSecond == 0)
                {
                    return permission_actions;
                }
                else
                {
                    return all_permission_actions;
                }
            });

            IDcRoleId mockDcRoleId = Substitute.For<IDcRoleId>();

            mockCoreFactory.DcRoleId(mockCoreProject).Returns(x =>
            {
                return mockDcRoleId;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgReadRolePermissionsDBFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;

            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId,  mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId,  mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 2;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId,  role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId,  permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_FAIL;
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
              
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            int count = 0;
            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            List<ENUM_Core_Function> all_permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            int countSecond = 0;
            mockCoreFactory.ListENUMCoreFunction().Returns(x =>
            {
                if (countSecond == 0)
                {
                    return permission_actions;
                }
                else
                {
                    return all_permission_actions;
                }
            });

            IDcRoleId mockDcRoleId = Substitute.For<IDcRoleId>();

            mockCoreFactory.DcRoleId(mockCoreProject).Returns(x =>
            {
                return mockDcRoleId;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithActionIdInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);


            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;

            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_createOrgInvoice;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 2;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, listOfOrgCreatedContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, listOfOrgMemberContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            int count = 0;
            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            List<ENUM_Core_Function> all_permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            int countSecond = 0;
            mockCoreFactory.ListENUMCoreFunction().Returns(x =>
            {
                if (countSecond == 0)
                {
                    return permission_actions;
                }
                else
                {
                    return all_permission_actions;
                }
            });

            IDcRoleId mockDcRoleId = Substitute.For<IDcRoleId>();

            mockCoreFactory.DcRoleId(mockCoreProject).Returns(x =>
            {
                return mockDcRoleId;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithOrgIdInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;


            int orgId = -999;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_createOrgInvoice;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId, mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId, mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 2;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();
            role_ids.Add(roleId);
            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId, role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId, permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, listOfOrgCreatedContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, listOfOrgMemberContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            
            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            int count = 0;
            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            List<ENUM_Core_Function> all_permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            int countSecond = 0;
            mockCoreFactory.ListENUMCoreFunction().Returns(x =>
            {
                if (countSecond == 0)
                {
                    return permission_actions;
                }
                else
                {
                    return all_permission_actions;
                }
            });

            IDcRoleId mockDcRoleId = Substitute.For<IDcRoleId>();

            mockCoreFactory.DcRoleId(mockCoreProject).Returns(x =>
            {
                return mockDcRoleId;
            }); bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_PermissionsUserCanDoCoreActionWithRoleIdsNull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;

            int orgId = 1;
            int roleId = 1;

            ENUM_Core_Function action_id = ENUM_Core_Function.CF_readallOrgServiceOrdersByUserId;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IOrgUser mockOrgReadMember = Substitute.For<IOrgUser>();

            mockCoreDb.Org_Read_Member(mockCoreProject, orgId, userId,  mockOrgReadMember).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            IOrgUser mockOrgReadOwner = Substitute.For<IOrgUser>();
            mockCoreDb.Org_Read_Org_Owner_User(mockCoreProject, orgId,  mockOrgReadOwner).Returns(x =>
            {
                mockOrgReadOwner.userId = 2;
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<int> role_ids = Substitute.For<List<int>>();

            mockCoreDb.Org_Read_Role_Mapping_IDs_For_User(mockCoreProject, orgId, userId,  role_ids).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            List<ENUM_Core_Function> permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            mockCoreDb.Org_Read_Role_Permissions(mockCoreProject, orgId, roleId,  permission_actions).Returns(x =>
            {
                permission_actions.Add(action_id);
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
              
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            mockCoreFactory.ListInt().Returns(x =>
            {
                return role_ids;
            });

            int count = 0;
            mockCoreFactory.OrgUser().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return mockOrgReadMember;
                }
                else
                {
                    return mockOrgReadOwner;
                }
            });

            List<ENUM_Core_Function> all_permission_actions = Substitute.For<List<ENUM_Core_Function>>();
            int countSecond = 0;
            mockCoreFactory.ListENUMCoreFunction().Returns(x =>
            {
                if (countSecond == 0)
                {
                    return permission_actions;
                }
                else
                {
                    return all_permission_actions;
                }
            });

            IDcRoleId mockDcRoleId = Substitute.For<IDcRoleId>();

            mockCoreFactory.DcRoleId(mockCoreProject).Returns(x =>
            {
                return mockDcRoleId;
            });

            bool returnValue = Validation.Permissions_User_Can_Do_Core_Action(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, userId, orgId, action_id);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region Is_Valid_Email_ID_Combo

        [TestMethod]
        public void Validation_IsValidEmailIDCombo()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;
            string emailAddress = "abc@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return emailAddress;
            });




            mockStrings.Is_Valid_EmailAddress(emailAddress).Returns(x => {

                return true;
            });
            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailIDComboWithGetLoginNameFromUserIDEmailAddressDiff()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);

            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;
            string emailAddress = "abc@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            //mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            //{
            //    return "xyz@gmail.com";
            //});

            //bool user_id_known = true;
            //mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId, out user_id_known).Returns(x =>
            //{
            //    
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});




            mockStrings.Is_Valid_EmailAddress(emailAddress).Returns(x =>

            {
                return true;
            });
            mockNumbers.Is_Valid_User_ID(mockCoreProject, userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailIDComboWithEmailAddressInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);


            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;
            string emailAddress = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidEmailIDComboWithDBIsUserIDKnownDBFail()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);


            //ICoreProject coreProject, IDatabaseOperations_System dbs, string emailAddress, int userId, IDatabaseOperations_Validation dbValid
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int userId = 1;
            string emailAddress = "abc@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return emailAddress;
            });

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Valid_Email_ID_Combo(mockCoreProject, emailAddress, userId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region WithinSubscription

        [TestMethod]
        public void Validation_WithinSubscription()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IValidation mockValid = Substitute.For<IValidation>();
            
            IUtils mockUtils = Substitute.For<IUtils>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcCreateMember mockDcCreateMember = Substitute.For<IDcCreateMember>();
            IDC_Base mockDCBase = Substitute.For<IDC_Base>();

            mockDCBase.coreProj = mockCoreProject;
            mockDCBase.cmd_user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

           

            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });
            
            IDcrStringList mockDcrStringList = Substitute.For<IDcrStringList>();
            
            mockCoreSc.Org_Read_App_GUID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDcrStringList.func_msg = ServiceResponse.status_ok;
                mockDcrStringList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrStringList;
            });


            IDcrUserList mockDcrUserList = Substitute.For<IDcrUserList>();
            mockCoreSc.Read_All_Org_Members_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 mockDcrUserList.func_msg = ServiceResponse.status_ok;
                 mockDcrUserList.func_status = ENUM_Cmd_Status.ok;
                 return mockDcrUserList;
             });

            


            bool returnValue = Validation.WithinSubscription(mockDCBase, mockValid, mockUtils,mockCoreSc, mockCoreDb,mockCoreFactory, mockDcCreateMember, typeof(IDcCreateMember));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_WithinSubscriptionWithOrgReadAppGUIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IValidation mockValid = Substitute.For<IValidation>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcCreateMember mockDcCreateMember = Substitute.For<IDcCreateMember>();
            IDC_Base mockDCBase = Substitute.For<IDC_Base>();

            mockDCBase.coreProj = mockCoreProject;
            mockDCBase.cmd_user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            IDcrStringList mockDcrStringList = Substitute.For<IDcrStringList>();

            mockCoreSc.Org_Read_App_GUID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDcrStringList.func_msg = ServiceResponse.status_unknown;
                mockDcrStringList.func_status = ENUM_Cmd_Status.Unknown;
                return mockDcrStringList;
            });


            IDcrUserList mockDcrUserList = Substitute.For<IDcrUserList>();
            mockCoreSc.Read_All_Org_Members_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrUserList.func_msg = ServiceResponse.status_ok;
                mockDcrUserList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrUserList;
            });




            bool returnValue = Validation.WithinSubscription(mockDCBase, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory, mockDcCreateMember, typeof(IDcCreateMember));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_WithinSubscriptionWithReadAllOrgMembersByOrgIDFuncStatusNotOk()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            ValidationSystem mockSystemobj = new ValidationSystem(mockNumbers, mockStrings, mockBelong);
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystemobj, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISC_SYS_System mockSCSYSSystem = Substitute.For<ISC_SYS_System>();
            IValidation mockValid = Substitute.For<IValidation>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcCreateMember mockDcCreateMember = Substitute.For<IDcCreateMember>();
            IDC_Base mockDCBase = Substitute.For<IDC_Base>();

            mockDCBase.coreProj = mockCoreProject;
            mockDCBase.cmd_user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });

            IDcrStringList mockDcrStringList = Substitute.For<IDcrStringList>();

            mockCoreSc.Org_Read_App_GUID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                mockDcrStringList.func_msg = ServiceResponse.status_ok;
                mockDcrStringList.func_status = ENUM_Cmd_Status.ok;
                return mockDcrStringList;
            });


            IDcrUserList mockDcrUserList = Substitute.For<IDcrUserList>();
            mockCoreSc.Read_All_Org_Members_By_Org_ID(mockDcOrgId, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                mockDcrUserList.func_msg = ServiceResponse.status_unknown;
                mockDcrUserList.func_status = ENUM_Cmd_Status.Unknown;
                return mockDcrUserList;
            });




            bool returnValue = Validation.WithinSubscription(mockDCBase, mockValid, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory, mockDcCreateMember, typeof(IDcCreateMember));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion


        #endregion

        #region IValidationBelong

        #region BELONG_Org_Role

        [TestMethod]
        public void Validation_BELONGOrgRole()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers,mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            bool is_Known = true;
            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Role_ID(mockCoreProject, roleId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            
            ITrueFalse role_id_known = mockCoreFactory.TrueFalse();

            role_id_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return role_id_known;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID, role_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgRoleWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse isKnown = mockCoreFactory.TrueFalse();

            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------




            ITrueFalse is_Known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID, is_Known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse role_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, roleId,  role_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgRoleWithDBIsOrgIDKnownDBFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            bool isKnown = true;
            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            ITrueFalse is_Known = mockCoreFactory.TrueFalse();


            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID, is_Known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });


            ITrueFalse role_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, roleId,  role_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgRoleWithDBIsRoleIDKnownDBFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            bool isKnown = true;
            int orgId = 1;
            int roleId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------



            ITrueFalse is_Known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, roleId, DB_Base.DBTable_Org_Roles_Available_Table, DB_Base.DBTable_Org_Roles_Available_Table_orgId, DB_Base.DBTable_Org_Roles_Available_Table_ID,  is_Known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse role_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Role_ID_Known(mockCoreProject, roleId, role_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.BELONG_Org_Role(mockCoreProject, orgId, roleId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region BELONG_Org_Calendar

        [TestMethod]
        public void Validation_BELONGOrgCalendar()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationOrgBelong mockValidationOrgBelong = new ValidationOrgBelong(mockNumbers);

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            orgId_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return orgId_known;
            });

            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calendarId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgCalendarWithDBIsCalendarIDKnownDbFail()
        {
            // ---------- Arrange--------------

            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationOrgBelong mockValidationOrgBelong = new ValidationOrgBelong(mockNumbers);

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse calendarId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId,  calendarId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgCalendarWithDBIsOrgIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------

            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationOrgBelong mockValidationOrgBelong = new ValidationOrgBelong(mockNumbers);

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse calendarId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId, calendarId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgCalendarWithDBIsIDBelongingToOrgDbFail()
        {
            // ---------- Arrange--------------

            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationOrgBelong mockValidationOrgBelong = new ValidationOrgBelong(mockNumbers);

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


             ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse calendarId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Calendar_ID_Known(mockCoreProject, calendarId,  calendarId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID,  orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.BELONG_Org_Calendar(mockCoreProject, orgId, calendarId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region BELONG_Org_Exception
        [TestMethod]
        public void Validation_BELONGOrgException()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            orgId_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return orgId_known;
            });

            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgExceptionWithDBIsExceptionIDKnownDbFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse exceptionId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exceptionId, exceptionId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID,  orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgExceptionWithDBIsOrgIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse exceptionId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exceptionId, exceptionId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_BELONGOrgExceptionWithDBIsIDBelongingToOrgDbFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse exceptionId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Exception_ID_Known(mockCoreProject, exceptionId,  exceptionId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.BELONG_Org_Exception(mockCoreProject, orgId, exceptionId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Appointment_Belonging_To_Organisation

        [TestMethod]
        public void Validation_IsAppointmentBelongingToOrganisation()
        {
            // ---------- Arrange--------------

            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse appointment_known = mockCoreFactory.TrueFalse();
            appointment_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return appointment_known;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, appointmentId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, appointment_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Appointment_Belonging_To_Organisation(mockCoreProject, orgId, appointmentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsAppointmentBelongingToOrganisationWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int appointmentId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse appointment_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, appointmentId, DB_Base.DBTable_Org_Appointments_Table, DB_Base.DBTable_Org_Appointments_Table_Org_ID, DB_Base.DBTable_Org_Appointments_Table_ID, appointment_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Appointment_Belonging_To_Organisation(mockCoreProject, orgId, appointmentId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region Is_Exception_Belonging_To_Organisation

        [TestMethod]
        public void Validation_IsExceptionBelongingToOrganisation()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse exception_known = mockCoreFactory.TrueFalse();
            exception_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return exception_known;
            });


            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID, exception_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Exception_Belonging_To_Organisation(mockCoreProject, orgId, exceptionId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsExceptionBelongingToOrganisationWithDBIsIDBelongingToOrgDBFail()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers,mockValidationOrgBelong);


            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            int orgId = 1;
            int exceptionId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            ITrueFalse exception_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, exceptionId, DB_Base.DBTable_Org_Exceptions_Table, DB_Base.DBTable_Org_Exceptions_Table_Org_ID, DB_Base.DBTable_Org_Exceptions_Table_ID,  exception_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Exception_Belonging_To_Organisation(mockCoreProject, orgId, exceptionId, mockCoreDb,mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Belonging_To_Org

        [TestMethod]
        public void Validation_IsBelongingToOrgWithIOrgID()
        {
            // ---------- Arrange--------------

            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationOrgBelong mockOrgBelong = new ValidationOrgBelong(mockNumbers);

            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);

            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId,  orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockOrgID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsBelongingToOrgWithIResourceID()
        {
            // ---------- Arrange--------------

            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IResourceID mockResourceID = Substitute.For<IResourceID>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int resId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID,  orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockOrgID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory );

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsBelongingToOrgWithIDcCreateResource()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();            
            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            //DC_Create_Resource dcCreateResource = new DC_Create_Resource(mockCoreProject);
            IDcCreateResource mockDcCreateResource = Substitute.For<IDcCreateResource>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateResource.orgId = 0;
            mockDcCreateResource.userId = 1;
            mockDcCreateResource.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            int resourceId = 1;

           ITrueFalse user_id_known = mockCoreFactory.TrueFalse();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Org_Resource(mockCoreProject, mockDcCreateResource.orgId, resourceId, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, mockDcCreateResource.userId,  user_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateResource.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockDcCreateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsBelongingToOrgWithICalendarID()
        {
            // ---------- Arrange--------------

            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCalendarID.calendarId = 1;

            int orgId = 1;

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, mockCalendarID.calendarId, DB_Base.DBTable_Org_Calendar_Table, DB_Base.DBTable_Org_Calendar_Table_orgId, DB_Base.DBTable_Org_Calendar_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion



        #endregion

        #region IValidationDates

        #region Is_Valid_DateTime
        [TestMethod]
        public void Validation_IsValidDateTime()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationDates mockDatesobj = new ValidationDates();
            Validation Validation = new Validation(mockBelong, mockDatesobj, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            Instant str_date_time = InstantPattern.ExtendedIsoPattern.Parse("2017-01-13T10:02:59.0000000Z").Value;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_DateTime(str_date_time);
            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region CheckTimeIsWithinSystemTimeBoundaries

        [TestMethod]
        public void Validation_CheckTimeIsWithinSystemTimeBoundaries()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationDates mockDatesobj = new ValidationDates();
            Validation Validation = new Validation(mockBelong, mockDatesobj, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse("2017-01-13T10:02:59.0000000Z").Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse("2017-01-13T10:07:59.0000000Z").Value;

            int categorie_type_id = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        #endregion




        #endregion

        #region IValidationLocation

        #region Is_Valid_Location

        [TestMethod]
        public void Validation_IsValidLocation()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationLocation mockLocationobj = new ValidationLocation();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocationobj, mockNumbers, mockStrings, mockSystem, mockIsValid);
            double la = 21.7679;
            double lng = 78.8718;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Location(la, lng);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #endregion
       
        #region Is_Valid_Org_Customer
        [TestMethod]
        public void Validation_IsValidOrgCustomer()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IValidationOrgBelong mockOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);

            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();
            

            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);

            

            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId,  listOfOrgCreatedContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, listOfOrgMemberContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            int count = 0;
            mockCoreFactory.ListIContact().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return listOfOrgCreatedContacts;

                }
                else if (count == 1)
                {
                    count++;
                    return listOfOrgMemberContacts;
                }
                else
                {
                    return new List<IContact>();
                }

            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

            mockCoreFactory.DcOrgId(mockCoreProject).Returns(x =>
            {
                return mockDcOrgId;
            });


            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb,mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgCustomerWithReadAllOrgCreatedContactsDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationOrgBelong mockOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);

            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();


            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            
            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);

            mockCoreFactory.ListIContact().Returns(x =>
            {
                return listOfOrgCreatedContacts;

            });

            
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId,  listOfOrgCreatedContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, listOfOrgMemberContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            
            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

            

            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgCustomerWithReadAllOrgMemberContactsDBFAIL()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationOrgBelong mockOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);

            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();


            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId, listOfOrgCreatedContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);


            mockCoreFactory.ListIContact().Returns(x =>
            {
                return listOfOrgMemberContacts;
            });

            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId, listOfOrgMemberContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return "xyz@gmail.com";
            });

            

            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidOrgCustomerWithGetLoginNameFromUserIDEmpty()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationOrgBelong mockOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);

            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IDcOrgId mockDcOrgId = Substitute.For<IDcOrgId>();


            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            IContact mockContact = Substitute.For<IContact>();
            List<IContact> listOfOrgCreatedContacts = Substitute.For<List<IContact>>();
            mockContact.contactType = ENUM_SYS_ContactType.Customer;
            mockContact.emailAddress = "xyz@gmail.com";
            listOfOrgCreatedContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Created_Contacts(mockCoreProject, orgId,  listOfOrgCreatedContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            List<IContact> listOfOrgMemberContacts = Substitute.For<List<IContact>>();
            listOfOrgMemberContacts.Add(mockContact);
            mockCoreDb.ReadAll_Org_Member_Contacts(mockCoreProject, orgId,  listOfOrgMemberContacts).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.GetLoginNameFromUserID(mockCoreProject, userId).Returns(x =>
            {
                return string.Empty;
            });

            int count = 0;
            mockCoreFactory.ListIContact().Returns(x =>
            {
                if (count == 0)
                {
                    count++;
                    return listOfOrgCreatedContacts;

                }
                else if (count == 1)
                {
                    count++;
                    return listOfOrgMemberContacts;
                }
                else
                {
                    return new List<IContact>();
                }

            });

            bool returnValue = Validation.Is_Valid_Org_Customer(mockCoreProject, userId, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_User_Member_Of_Organisation

        [TestMethod]
        public void Validation_IsUserMemberOfOrganisation()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidationOrgBelong mockOrgBelong = Substitute.For<IValidationOrgBelong>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);
            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IDC_Base mockDCBase = Substitute.For<IDC_Base>();

            int userId = 1;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockCoreFactory.DcBase(mockCoreProject).Returns(x =>
            {
                return mockDCBase;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);

            mockCoreFactory.ListOrg().Returns(x =>
            {
                return mockListOrg;
            });

            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
                //x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb, mockCoreFactory);


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsUserMemberOfOrganisationWithUserIdEqualSYSTEMWILDCARDINT()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            IValidationOrgBelong mockOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);

            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = GeneralConfig.SYSTEM_WILDCARD_INT;
            int orgId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            IDC_Base mockDCBase = Substitute.For<IDC_Base>();

            mockCoreFactory.DcBase(mockCoreProject).Returns(x =>
            {
                return mockDCBase;
            });

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);

            mockCoreFactory.ListOrg().Returns(x =>
            {
                return mockListOrg;
            });
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
              
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsUserMemberOfOrganisationWithOrgIdDiff()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            IUtils mockUtils = Substitute.For<IUtils>();
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            int userId = 1;
            int orgId = 2;

            // ---------- Arrange--------------

            //----------- Act -----------------

            List<IOrg> mockListOrg = Substitute.For<List<IOrg>>();
            IOrg mockOrg = Substitute.For<IOrg>();
            mockOrg.orgId = 1;
            mockListOrg.Add(mockOrg);
            mockCoreDb.User_Read_All_Users_Organisation_Memberships(mockCoreProject, userId, mockUtils, mockListOrg).Returns(x =>
            {
                //x[3] = mockListOrg;
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, userId, orgId, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion
        
        #region Is_Org_Resource

        [TestMethod]
        public void Validation_IsOrgResource()
        {
            // ---------- Arrange--------------
            
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationOrgBelong mockOrgBelong = new ValidationOrgBelong(mockNumbers);
            
            ValidationBelong mockBelongObj = new ValidationBelong(mockNumbers, mockOrgBelong);

            Validation Validation = new Validation(mockBelongObj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();

            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------
            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            orgId_known.isTrue = true;
            mockCoreFactory.TrueFalse().Returns(x =>
            {
                return orgId_known;
            });


                mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
                {

                    return true;
                });

            

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, orgId_known).Returns(x =>
                {
                    
                    return ENUM_DB_Status.DB_SUCCESS;
                });



                bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb, mockCoreFactory);


                //----------- Act -----------------

                //---------- Assert----------------

                Assert.AreEqual(true, returnValue);

                //---------- Assert----------------
            }

            [TestMethod]
        public void Validation_IsOrgResourceWithDBIsResourceIDKnownDbFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

 
            ITrueFalse resource_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resId,  resource_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsOrgResourceWithDBIsOrgIDKnownKnownDbFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse resource_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resId, resource_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsOrgResourceWithDBIsIDBelongingToOrgDbFail()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            int orgId = 1;
            int resId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse resource_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resId, resource_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });
            ITrueFalse org_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, org_id_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            mockCoreDb.DB_Is_ID_Belonging_To_Org(mockCoreProject, orgId, resId, DB_Base.DBTable_Org_Resources_Table, DB_Base.DBTable_Org_Resources_Table_Resource_orgId, DB_Base.DBTable_Org_Resources_Table_ID, orgId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_FAIL;
            });


            bool returnValue = Validation.Is_Org_Resource(mockCoreProject, orgId, resId, mockCoreSc, mockCoreDb, mockCoreFactory);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region Is_Valid_BookingOverlap

        [TestMethod]
        public void Validation_IsValidBookingOverlap()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationEnums mockEnumsObj = new ValidationEnums();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            Enum_SYS_BookingOverlap obj = Enum_SYS_BookingOverlap.NoOverlapping;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_BookingOverlap(obj);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidBookingOverlapWithUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationEnums mockEnumsObj = new ValidationEnums();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            Enum_SYS_BookingOverlap obj = Enum_SYS_BookingOverlap.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_BookingOverlap(obj);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region Is_Valid_Exception_Title

        [TestMethod]
        public void Validation_IsValidExceptionTitle()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            ValidationString mockStringObj = new ValidationString();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationStrings mockStringsObj = new ValidationStrings(mockStringObj, mockDates);

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStringsObj, mockSystem, mockIsValid);
            string exceptionTitle = "Test string";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------
            
             mockStrings.Is_Valid_String(exceptionTitle).Returns(x =>

             {
                 return true;
             });

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTitleWithExceptionTitleEmpty()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            string exceptionTitle = string.Empty;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTitleWithExceptionTitleNull()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            string exceptionTitle = null;
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidExceptionTitleWithExceptionTitleMorethan249Char()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            string exceptionTitle = "There are more than 249 character in this input string for testing it's functionality or Validation work correctly or not. Testing Validation working properly or not! Testing Validation working properly or not! Testing Validation working properly or not!";
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Exception_Title(exceptionTitle, mockCoreSc);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region Is_Valid_Repeat_Type
        [TestMethod]
        public void Validation_IsValidRepeatTypeByRepeatType()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ValidationEnums mockEnumsObj = new ValidationEnums();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnumsObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ENUM_Event_Repeat_Type repeatType = ENUM_Event_Repeat_Type.Repeat;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidRepeatTypeByRepeatTypeWithRepeatTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ENUM_Event_Repeat_Type repeatType = ENUM_Event_Repeat_Type.Unknown;

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Repeat_Type(repeatType);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region Is_Valid_Service_Relationship

        [TestMethod]
        public void Validation_IsValidServiceRelationship()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            ValidationEnums mockEnumObj = new ValidationEnums();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnumObj, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ENUM_SYS_ServiceResource_Relationship applyTo = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Service_Relationship(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidServiceRelationshipWithCountryLocationUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ENUM_SYS_ServiceResource_Relationship applyTo = ENUM_SYS_ServiceResource_Relationship.Unknown;
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid_Service_Relationship(applyTo);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region CONVERT_Currency

        [TestMethod]
        public void Validation_CONVERTCurrency()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            decimal currencyAmount = 1;
            ENUM_SYS_CurrencyOption currency = ENUM_SYS_CurrencyOption.USD;
            ENUM_SYS_CurrencyOption outputCurrency = GeneralConfig.DEFAULT_SYSTEM_CURRENCY;
            // ---------- Arrange--------------

            //----------- Act -----------------

            decimal newCurrencyVal;
            bool returnValue = Validation.CONVERT_Currency(currencyAmount, currency, outputCurrency, out newCurrencyVal);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Is_Calendar_Belonging_To_Organisation

        [TestMethod]
        public void Validation_IsCalendarBelongingToOrganisation()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            IValidationOrgBelong mockValidationOrgBelong = Substitute.For<IValidationOrgBelong>();

            ValidationBelong mockBelongobj = new ValidationBelong(mockNumbers, mockValidationOrgBelong);

            Validation Validation = new Validation(mockBelongobj, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            int orgId = 1;
            int calendarId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------


            bool returnValue = Validation.Is_Calendar_Belonging_To_Organisation(orgId, calendarId);

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region Is_Valid
        
        #region IsValidWithIExceptionID

        [TestMethod]
        public void Validation_IsValidWithIExceptionID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionID mockExceptionID = Substitute.For<IExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockExceptionID.exceptionId = 1;
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionID, typeof(IExceptionID));



            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);
                
            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionID_ExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionID mockExceptionID = Substitute.For<IExceptionID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockExceptionID.exceptionId = 1;
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, exception_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockExceptionID, typeof(IExceptionID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAppointmentID

        [TestMethod]
        public void Validation_IsValidWithIAppointmentID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentID mockAppointmentID = Substitute.For<IAppointmentID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;

            int appointmentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAppointmentID.appointmentId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointmentID.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAppointmentID, typeof(IAppointmentID));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentID_AppointmentIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentID mockAppointmentID = Substitute.For<IAppointmentID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAppointmentID.appointmentId = 0;
            //mockCoreDb.DB_Is_Appointment_ID_Known(mockCoreProject, appointmentId, out appointment_known).Returns(x =>
            //{
            //    
            //    return ENUM_DB_Status.DB_FAIL;
            //});

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointmentID.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAppointmentID, typeof(IAppointmentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithINotificationOptions
        [TestMethod]
        public void Validation_IsValidWithINotificationOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockStrings.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_NotificationMessageInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = string.Empty;
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_NotificationTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            IFactoryCore mockCoreFactoryCore = Substitute.For<IFactoryCore>();

            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;
            mockNotificationOptions.notificationType = ENUM_Notification_Type.Unknown;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactoryCore).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb,mockCoreFactoryCore).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb,mockCoreFactoryCore).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactoryCore, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_NotificationStateUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;
            mockNotificationOptions.notificationState = ENUM_Notification_State.Unknown;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationOptions_IsValidOrgIDInvlaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationOptions mockNotificationOptions = Substitute.For<INotificationOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>(); 

            int user_id = 1;

            int orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNotificationOptions.notificationMessage = "abc";
            mockNotificationOptions.orgId = 1;
            mockNotificationOptions.userId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotificationOptions.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockNotificationOptions, typeof(INotificationOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIOrgAppointment

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });



            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidResourceIDListInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidTimeScaleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------s



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidDateTimeString_StarInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();


            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgAppointment mockOrgAppointment = Substitute.For<IOrgAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            bool appointment_known = true;
            int appointmentId = 1;
            int user_id = 1;

            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------



            // ---------- Arrange--------------

            //----------- Act -----------------
            mockOrgAppointment.appointmentId = 1;
            mockOrgAppointment.appointmentTitle = "Appointment Title";
            mockOrgAppointment.creatorId = 1;
            mockOrgAppointment.orgId = 1;
            mockOrgAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockOrgAppointment.end = "2017-01-13T10:06:59.0000000Z";
            mockOrgAppointment.durationMilliseconds = (long)TimeSpan.FromSeconds(1).TotalMilliseconds; ;
            mockOrgAppointment.timeZoneIANA = "America/Boise";
            mockOrgAppointment.durationMilliseconds = 70000;

            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            int resId = 1;
            resourceIdList.Add(resourceId);
            mockOrgAppointment.resourceIdList = resourceIdList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockOrgAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockOrgAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID_List(mockCoreProject, mockOrgAppointment.resourceIdList, orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockDates.Is_Valid_TimeScale(mockOrgAppointment).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockOrgAppointment.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockOrgAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockOrgAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockOrgAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgAppointment, typeof(IOrgAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatOptions

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
         

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatDayInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatMonthInvalid()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatWeekInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------s

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatWeekDayInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatYearInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatLimitYearInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidRepeatModifierInvalid()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptions_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int orgId = 1;
            int exception_id = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_Day(mockRepeatOptions.repeatDay).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Type((int)mockRepeatOptions.repeatType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Month(mockRepeatOptions.repeatMonth).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Week(mockRepeatOptions.repeatWeek).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_WeekDay(mockRepeatOptions.repeatWeekDays).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Year(mockRepeatOptions.repeatYear).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Limit(mockRepeatOptions.maxOccurances).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Repeat_Modifier(mockRepeatOptions.modifier).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRepeatOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockRepeatOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockRepeatOptions, typeof(IRepeatOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIResourceOptions

        // need to impliment validation
        [TestMethod]
        public void Validation_IsValidWithIResourceOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            int resourceId = 1;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockResourceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockResourceOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject,resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockResourceOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockResourceOptions.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockResourceOptions.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockResourceOptions.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockResourceOptions.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockResourceOptions.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockResourceOptions.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockResourceOptions.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockResourceOptions.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockResourceOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockResourceOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockResourceOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockResourceOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            //ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            //mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, out orgId_known).Returns(x =>
            //{
            //   
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});


            //bool user_id_known = true;
            //mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, out user_id_known).Returns(x =>
            //{
            //   
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});


            //bool res_id_known = true;

            //mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, out res_id_known).Returns(x =>
            //{
            //   
            //    return ENUM_DB_Status.DB_SUCCESS;
            //});

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_OrgIdNotZero()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 1;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id,  user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_ResourceIdZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            int resourceId = 0;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_AllowsOverlapsUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.Unknown;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxAppointmentDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = -1;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxDailyUserSlotsInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.maxDailyUserSlots = -1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse(); 
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id,  res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxExceptionDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            ////mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = -1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id,  user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id,  res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_MaxAppointmentFutureTimeInMsInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "Resource";
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = -1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id,  user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_ResourceNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_SlotDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 2;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id,  res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_TimeAllocationTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.Unknown;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_TimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = "abc";
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = string.Empty;

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });


            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_DBIsOrgIDKnownDBFail()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";

            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });



            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });



            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_DBIsUserIDKnownDBFail()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });



            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });



            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceOptions_DBIsResourceIDKnownDBFail()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceOptions mockResourceOptions = Substitute.For<IResourceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            int resource_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockResourceOptions.orgId = 0;
            mockResourceOptions.userId = 1;
            //mockResourceOptions.resourceId = 1;
            mockResourceOptions.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockResourceOptions.maxAppointmentDuration = 2;
            mockResourceOptions.resourceName = string.Empty;
            mockResourceOptions.maxDailyUserSlots = 1;
            mockResourceOptions.maxExceptionDuration = 1;
            mockResourceOptions.maxAppointmentFutureTimeInMs = 1;
            mockResourceOptions.slotDuration = 900000;
            mockResourceOptions.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockResourceOptions.timeZoneIANA = "America/Boise";


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });



            ITrueFalse user_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_UserID_Known(mockCoreProject, user_id, user_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });



            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();

            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resource_id, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceOptions, typeof(IResourceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceOptions

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory,  mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 1;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mocKCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 0;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb,mocKCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb,mocKCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mocKCoreFactory, mockServiceOptions, typeof(IServiceOptions));


            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIServiceOptions_OrgIdNotZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOptions mockServiceOptions = Substitute.For<IServiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockServiceOptions.orgId = 1;
            mockServiceOptions.taxRate = 1;
            mockServiceOptions.name = "Service";
            mockServiceOptions.description = "Service decription";
            mockServiceOptions.monetaryAmount = 10;
            mockServiceOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_NameStr(mockServiceOptions.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockServiceOptions.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockServiceOptions.monetaryAmount, mockServiceOptions.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockServiceOptions.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });




            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOptions, typeof(IServiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIDcServiceID

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 0;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcServiceID_OrgIdNotZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcServiceId mockDcServiceID = Substitute.For<IDcServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcServiceID.orgId = 1;
            mockDcServiceID.serviceId = 1;
            mockDcServiceID.cmd_user_id = 1;
            mockDcServiceID.serviceId = 1;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcServiceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcServiceID.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcServiceID.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcServiceID.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcServiceID, typeof(IDcServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIContactOptions

        [TestMethod]
        public void Validation_IsValidWithIContactOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";
            mockContactOptions.contactAcquisition = ENUM_Contact_Acquisition.ManualInput;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mocKCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mocKCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mocKCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mocKCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidContactTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidUserTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidString_FirstNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidString_LastNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem,mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_IsValidString_OrgNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_ContactTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Unknown;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_ContactTitleUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory =Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Unknown;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_ContactFirstNameLastNameOrgNameEmpty()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = string.Empty;
            mockContactOptions.contactLastName = string.Empty;
            mockContactOptions.orgName = string.Empty;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactOptions_ContactAcquisitionUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactOptions mockContactOptions = Substitute.For<IContactOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockContactOptions.orgId = 0;
            mockContactOptions.userId = 1;
            mockContactOptions.contactType = ENUM_SYS_ContactType.Customer;
            mockContactOptions.contactTitle = Enum_SYS_User_Title.Mrs;
            mockContactOptions.contactFirstName = "john";
            mockContactOptions.contactLastName = "smith";
            mockContactOptions.orgName = "Org Name";
            mockContactOptions.contactAcquisition = ENUM_Contact_Acquisition.Unknown;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockContactOptions.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockContactOptions.contactType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_Title((int)mockContactOptions.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockContactOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactOptions, typeof(IContactOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIAddressOptions

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------


            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb,  mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidAddressString_Address1Invalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidAddressString_Address2Invalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_AttentionInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_CityInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_TownInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidString_ZipcodeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressOptions_IsValidCountryLocationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressOptions mockAddressOptions = Substitute.For<IAddressOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int orgId = 1;
            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            mockAddressOptions.orgId = 0;
            mockAddressOptions.userId = 1;
            mockAddressOptions.address1 = "Address1";
            mockAddressOptions.address2 = "Address2";
            mockAddressOptions.attention = "Attention";
            mockAddressOptions.city = "City";
            mockAddressOptions.town = "town";
            mockAddressOptions.zipcode = "12345";
            mockAddressOptions.country = Enum_SYS_Country_Location.USA;
            mockAddressOptions.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAddressOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockAddressOptions.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockAddressOptions.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAddressOptions.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockAddressOptions.country).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressOptions, typeof(IAddressOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIRepeatID

        [TestMethod]
        public void Validation_IsValidWithIRepeatID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatID.repeatId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockRepeatID.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatID, typeof(IRepeatID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatID.repeatId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockRepeatID.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatID, typeof(IRepeatID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatID_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatID mockRepeatID = Substitute.For<IRepeatID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatID.repeatId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {

                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockRepeatID.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatID, typeof(IRepeatID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICreatorID

        [TestMethod]
        public void Validation_IsValidWithICreatorID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatorID mockCreatorID = Substitute.For<ICreatorID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreatorID.creatorId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatorID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreatorID.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreatorID, typeof(ICreatorID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatorID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatorID mockCreatorID = Substitute.For<ICreatorID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreatorID.creatorId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatorID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreatorID.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreatorID, typeof(ICreatorID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatorID_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatorID mockCreatorID = Substitute.For<ICreatorID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreatorID.creatorId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatorID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreatorID.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreatorID, typeof(ICreatorID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeScale
       
        [TestMethod]
        public void Validation_IsValidWithITimeScale()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockUtils, mockCoreSc,  mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeScale_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeScale mockTimeScale = Substitute.For<ITimeScale>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockTimeScale.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeScale.end = "2017-01-13T10:07:59.0000000Z";
            mockTimeScale.durationMilliseconds = 60000;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeScale, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeScale.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeScale.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockTimeScale.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeScale.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeScale, typeof(ITimeScale));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeStartEnd

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb,  mockUtils, mockCoreFactory, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStartEnd_StartLessThanEnd()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStartEnd mockTimeStartEnd = Substitute.For<ITimeStartEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStartEnd.start = "2017-01-13T10:02:59.0000000Z";
            mockTimeStartEnd.end = "2017-01-13T09:07:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStartEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockTimeStartEnd.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockTimeStartEnd.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStartEnd, typeof(ITimeStartEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICreateException

        [TestMethod]
        public void Validation_IsValidWithICreateException()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });
            
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem,mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);




            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);




            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsUserMemberOfOrganisationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils,mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateException_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateException mockCreateException = Substitute.For<ICreateException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateException.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateException.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateException.exceptionTitle = "Exception Title";
            mockCreateException.durationMilliseconds = 60000;
            mockCreateException.orgId = 1;
            mockCreateException.creatorId = 1;
            mockCreateException.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateException.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateException.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateException.resourceIdList = resourceList;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateException.creatorId, mockCreateException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateException.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateException, typeof(ICreateException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICreateAppointment

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);







            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory,  mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);







            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
           


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);







            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>(); 

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsUserMemberOfOrganisationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);







            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreateAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreateAppointment mockCreateAppointment = Substitute.For<ICreateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockCreateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockCreateAppointment.appointmentTitle = "Title";
            mockCreateAppointment.durationMilliseconds = 60000;
            mockCreateAppointment.orgId = 1;
            mockCreateAppointment.creatorId = 1;
            mockCreateAppointment.timeZoneIANA = "America/Boise";
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockCreateAppointment.calendarIdList = calList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockRepeatOptions.creatorId = 1;
            mockListRepeatOptions.Add(mockRepeatOptions);
            mockCreateAppointment.repeatRuleOptions = mockListRepeatOptions;
            int resId = 1;
            List<int> resourceList = Substitute.For<List<int>>();
            resourceList.Add(resId);
            mockCreateAppointment.resourceIdList = resourceList;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreateAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockRepeatOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockCreateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockRepeatOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockCreateAppointment.creatorId, mockCreateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockCreateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockCreateAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreateAppointment, typeof(ICreateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIExceptionOptions

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------
             
            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();  

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });
            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIExceptionOptions_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IExceptionOptions mockExceptionOptions = Substitute.For<IExceptionOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockExceptionOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockExceptionOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockExceptionOptions.exceptionTitle = "Title";
            mockExceptionOptions.durationMilliseconds = 60000;
            mockExceptionOptions.orgId = 1;
            mockExceptionOptions.creatorId = 1;
            mockExceptionOptions.timeZoneIANA = "America/Boise";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockExceptionOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockExceptionOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockExceptionOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockExceptionOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockExceptionOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockExceptionOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_Exception_Title(mockExceptionOptions.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockExceptionOptions.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockExceptionOptions, typeof(IExceptionOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIRepeatable

        [TestMethod]
        public void Validation_IsValidWithIRepeatable()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatable mockRepeatable = Substitute.For<IRepeatable>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatable.isAAutoGenEvent = ENUM_Event_Repeat_Type.Repeat;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatable, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Repeat_Type(mockRepeatable.isAAutoGenEvent).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatable, typeof(IRepeatable));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatable_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatable mockRepeatable = Substitute.For<IRepeatable>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockRepeatable.isAAutoGenEvent = ENUM_Event_Repeat_Type.Repeat;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatable, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_Repeat_Type(mockRepeatable.isAAutoGenEvent).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatable, typeof(IRepeatable));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatable_IsValidRepeatTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatable mockRepeatable = Substitute.For<IRepeatable>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatable.isAAutoGenEvent = ENUM_Event_Repeat_Type.Repeat;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatable, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Repeat_Type(mockRepeatable.isAAutoGenEvent).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatable, typeof(IRepeatable));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIResourceID

        [TestMethod]
        public void Validation_IsValidWithIResourceID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceID mockResourceID = Substitute.For<IResourceID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockResourceID.resourceId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockResourceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockResourceID.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceID, typeof(IResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceID mockResourceID = Substitute.For<IResourceID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockResourceID.resourceId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockResourceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockResourceID.resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceID, typeof(IResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceID_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceID mockResourceID = Substitute.For<IResourceID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockResourceID.resourceId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockResourceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockResourceID.resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceID, typeof(IResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIApplyTo
        [TestMethod]
        public void Validation_IsValidWithIApplyTo()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IApplyTo mockApplyTo = Substitute.For<IApplyTo>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockApplyTo.applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockApplyTo, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Apply_To(mockApplyTo.applyTo).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockApplyTo, typeof(IApplyTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIApplyTo_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IApplyTo mockApplyTo = Substitute.For<IApplyTo>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockApplyTo.applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockApplyTo, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_Apply_To(mockApplyTo.applyTo).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb,  mockUtils, mockCoreFactory, mockApplyTo, typeof(IApplyTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIApplyTo_IsValidApplyToInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IApplyTo mockApplyTo = Substitute.For<IApplyTo>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockApplyTo.applyTo = ENUM_Repeat_Apply_To.OnlyThisEvent;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockApplyTo, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Apply_To(mockApplyTo.applyTo).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockApplyTo, typeof(IApplyTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithITimeStart

        [TestMethod]
        public void Validation_IsValidWithITimeStart()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStart mockTimeStart = Substitute.For<ITimeStart>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStart.start = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStart, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStart.start).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStart, typeof(ITimeStart));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStart_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStart mockTimeStart = Substitute.For<ITimeStart>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStart.start = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStart, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStart.start).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStart, typeof(ITimeStart));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeStart_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeStart mockTimeStart = Substitute.For<ITimeStart>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeStart.start = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeStart, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeStart.start).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeStart, typeof(ITimeStart));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeEnd

        [TestMethod]
        public void Validation_IsValidWithITimeEnd()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeEnd mockTimeEnd = Substitute.For<ITimeEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeEnd.end = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeEnd.end).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeEnd, typeof(ITimeEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeEnd_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeEnd mockTimeEnd = Substitute.For<ITimeEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockTimeEnd.end = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeEnd.end).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeEnd, typeof(ITimeEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeEnd_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeEnd mockTimeEnd = Substitute.For<ITimeEnd>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeEnd.end = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeEnd, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockTimeEnd.end).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeEnd, typeof(ITimeEnd));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatRules

        
        [TestMethod]
        public void Validation_IsValidWithIRepeatRules()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem ,mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;

            mockRepeat.creatorId = 1;
            mockListRepeat.Add(mockRepeat);
            mockRepeatRules.repeatRules = mockListRepeat;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject,mockCoreSc,mockCoreDb,mockUtils,mockCoreFactory, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return true;
            });




            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatRules_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>(); IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;

            mockRepeat.creatorId = 1;
            mockListRepeat.Add(mockRepeat);
            mockRepeatRules.repeatRules = mockListRepeat;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return true;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatRules_IsValidInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;

            mockRepeat.creatorId = 1;
            mockListRepeat.Add(mockRepeat);
            mockRepeatRules.repeatRules = mockListRepeat;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return false;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatRules_RepeatRulesNull()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatRules mockRepeatRules = Substitute.For<IRepeatRules>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<IRepeat> mockListRepeat = Substitute.For<List<IRepeat>>();
            IRepeat mockRepeat = Substitute.For<IRepeat>();
            mockRepeat.repeatDay = 1;
            mockRepeat.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeat.repeatMonth = 1;
            mockRepeat.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeat.repeatWeekDays = repeatWeekDays;
            mockRepeat.maxOccurances = 10;
            mockRepeat.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeat.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeat.modifier = 1;
            mockRepeat.orgId = 10;
            mockRepeat.creatorId = 2;
            mockRepeat.repeatId = 1;
            mockRepeat.creatorId = 1;

            /*mockListRepeat.Add(mockRepeat);*/
            mockRepeatRules.repeatRules = mockListRepeat;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatRules, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeat, typeof(IRepeat)).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatRules, typeof(IRepeatRules));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIResourceIDList

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockResourceIDList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockResourceIDList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockResourceIDList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIResourceIDList_DBIsResourceIDKnownDBFail()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IResourceIDList mockResourceIDList = Substitute.For<IResourceIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockResourceIDList.resourceIdList = resourceIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            ITrueFalse res_id_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Resource_ID_Known(mockCoreProject, resourceId, res_id_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_FAIL;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockResourceIDList, typeof(IResourceIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatOptionsList

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptionsList()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptionsList mockIRepeatOptionsList = Substitute.For<IRepeatOptionsList>();

            int orgId = 1;

            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;
            

            mockListRepeatOptions.Add(mockRepeatOptions);

            mockIRepeatOptionsList.repeatRuleOptions = mockListRepeatOptions;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockIRepeatOptionsList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x => 
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockIRepeatOptionsList, typeof(IRepeatOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIRepeatOptionsList_IsValidInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptionsList mockIRepeatOptionsList = Substitute.For<IRepeatOptionsList>();

            int orgId = 1;

            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;


            mockListRepeatOptions.Add(mockRepeatOptions);

            mockIRepeatOptionsList.repeatRuleOptions = mockListRepeatOptions;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockIRepeatOptionsList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockIRepeatOptionsList, typeof(IRepeatOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatOptionsList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatOptionsList mockIRepeatOptionsList = Substitute.For<IRepeatOptionsList>();

            int orgId = 1;

            int user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------
            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockListRepeatOptions.Add(mockRepeatOptions);


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockListRepeatOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory , mockListRepeatOptions, typeof(IRepeatOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIBaseCommand

        [TestMethod]
        public void Validation_IsValidWithIBaseCommand()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IBaseCommand mockBaseCommand = Substitute.For<IBaseCommand>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockBaseCommand.cmd_user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockBaseCommand, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockBaseCommand.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockBaseCommand, typeof(IBaseCommand));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIBaseCommand_DBIsUserIDKnownDBFail_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IBaseCommand mockBaseCommand = Substitute.For<IBaseCommand>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockBaseCommand.cmd_user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockBaseCommand, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockBaseCommand.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockBaseCommand, typeof(IBaseCommand));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIBaseCommand_DBIsUserIDKnownDBFail_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IBaseCommand mockBaseCommand = Substitute.For<IBaseCommand>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockBaseCommand.cmd_user_id = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockBaseCommand, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockBaseCommand.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockBaseCommand, typeof(IBaseCommand));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIGeneratedOn

        [TestMethod]
        public void Validation_IsValidWithIGeneratedOn()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGeneratedOn mockGeneratedOn = Substitute.For<IGeneratedOn>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockGeneratedOn.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGeneratedOn, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockGeneratedOn.dateOfGeneration).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockGeneratedOn, typeof(IGeneratedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGeneratedOn_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGeneratedOn mockGeneratedOn = Substitute.For<IGeneratedOn>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockGeneratedOn.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGeneratedOn, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockGeneratedOn.dateOfGeneration).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockGeneratedOn, typeof(IGeneratedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGeneratedOn_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid );



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGeneratedOn mockGeneratedOn = Substitute.For<IGeneratedOn>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockGeneratedOn.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGeneratedOn, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockGeneratedOn.dateOfGeneration).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockGeneratedOn, typeof(IGeneratedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITSOID

        [TestMethod]
        public void Validation_IsValidWithITSOID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockTSOID = Substitute.For<ITSOID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTSOID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockTSOID.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockTSOID = Substitute.For<ITSOID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockTSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTSOID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockTSOID.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOID_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockTSOID = Substitute.For<ITSOID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockTSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTSOID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockTSOID.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRepeatIDList

        [TestMethod]
        public void Validation_IsValidWithIRepeatIDList()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatIDList mockRepeatIDList = Substitute.For<IRepeatIDList>();

            List<int> repeatIds = Substitute.For<List<int>>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            int repeatId = 1;
            repeatIds.Add(repeatId);
            mockRepeatIDList.repeatIds = repeatIds;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatIDList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatIDList, typeof(IRepeatIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatIDList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatIDList mockRepeatIDList = Substitute.For<IRepeatIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<int> repeatIds = Substitute.For<List<int>>();
            int repeatId = 1;
            repeatIds.Add(repeatId);
            mockRepeatIDList.repeatIds = repeatIds;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatIDList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatIDList, typeof(IRepeatIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRepeatIDList_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRepeatIDList mockRepeatIDList = Substitute.For<IRepeatIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> repeatIds = Substitute.For<List<int>>();
            int repeatId = 1;
            repeatIds.Add(repeatId);
            mockRepeatIDList.repeatIds = repeatIds;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRepeatIDList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatIDList, typeof(IRepeatIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITSOComplete

        [TestMethod]
        public void Validation_IsValidWithITSOComplete()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithITSOComplete_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSOComplete_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOComplete mockITSOComplete = Substitute.For<ITSOComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSOComplete.start = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.end = "2017-01-13T10:07:59.0000000Z";
            mockITSOComplete.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSOComplete.durationMilliseconds = 60000;
            mockITSOComplete.orgId = 1;
            mockITSOComplete.repeatId = 1;
            mockITSOComplete.tsoId = 1;
            mockITSOComplete.exceptionId = 1;
            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockITSOComplete.calendarIdList = calList;



            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);

            mockITSOComplete.resourceIdList = resourceIdList;


            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSOComplete.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSOComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSOComplete.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSOComplete.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSOComplete.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSOComplete.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOComplete.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSOComplete, typeof(ITSOComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithITsoOptions

        [TestMethod]
        public void Validation_IsValidWithITsoOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });


            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb,  mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });


            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptions_IsValidDateTimeString_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITsoOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;



            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITsoOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPassword

        [TestMethod]
        public void Validation_IsValidWithIPassword()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPassword mockPassword = Substitute.For<IPassword>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockPassword.password = "password";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPassword, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Password(mockPassword.password).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockPassword, typeof(IPassword));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPassword_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPassword mockPassword = Substitute.For<IPassword>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockPassword.password = "password";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPassword, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Password(mockPassword.password).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPassword, typeof(IPassword));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPassword_IsValidPasswordInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPassword mockPassword = Substitute.For<IPassword>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPassword.password = "password";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPassword, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Password(mockPassword.password).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPassword, typeof(IPassword));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIException

        [TestMethod]
        public void Validation_IsValidWithIException()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIException_IsValidExceptionTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIException_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IException mockException = Substitute.For<IException>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockException.start = "2017-01-13T10:02:59.0000000Z";
            mockException.end = "2017-01-13T10:07:59.0000000Z";
            mockException.exceptionTitle = "Title";
            mockException.durationMilliseconds = 60000;
            mockException.orgId = 1;
            mockException.creatorId = 1;
            mockException.timeZoneIANA = "America/Boise";
            mockException.exceptionId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockException, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockException.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockException.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockException.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockException.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockException.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockException.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockException.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockException.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_User_Member_Of_Organisation(mockCoreProject, mockUtils, mockException.creatorId, mockException.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Exception_Title(mockException.exceptionTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockException.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockException, typeof(IException));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAppointmentOptions

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });
            
            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });
            
            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });
            
            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });
            
            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";  

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });
            
            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });
            
            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });



            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });



            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointmentOptions_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem,mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointmentOptions mockAppointmentOptions = Substitute.For<IAppointmentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointmentOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointmentOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointmentOptions.appointmentTitle = "Title";
            mockAppointmentOptions.durationMilliseconds = 60000;
            mockAppointmentOptions.orgId = 1;
            mockAppointmentOptions.creatorId = 1;
            mockAppointmentOptions.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointmentOptions, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointmentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointmentOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointmentOptions.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointmentOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointmentOptions.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointmentOptions.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointmentOptions.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointmentOptions, typeof(IAppointmentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAppointment

        [TestMethod]
        public void Validation_IsValidWithIAppointment()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;


            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAppointment mockAppointment = Substitute.For<IAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockAppointment.appointmentTitle = "Title";
            mockAppointment.durationMilliseconds = 60000;
            mockAppointment.orgId = 1;
            mockAppointment.creatorId = 1;
            mockAppointment.timeZoneIANA = "America/Boise";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAppointment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAppointment, typeof(IAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIUserOptions

        [TestMethod]
        public void Validation_IsValidWithIUserOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserOptions_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserOptions_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserOptions mockUserOptions = Substitute.For<IUserOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockUserOptions.emailAddress = "xyz@gmail.com";
            mockUserOptions.timeZoneIANA = "America/Boise";
            mockUserOptions.languageKey = ENUM_SYS_LanguageKey.English;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockUserOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockUserOptions.emailAddress).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockUserOptions.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockUserOptions, typeof(IUserOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIITSOID

        [TestMethod]
        public void Validation_IsValidWithIITSOID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockITSOID = Substitute.For<ITSOID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockITSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOID.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIITSOID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockITSOID = Substitute.For<ITSOID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockITSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOID.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIITSOID_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOID mockITSOID = Substitute.For<ITSOID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockITSOID.tsoId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSOID.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOID, typeof(ITSOID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICalendarOptions

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            mockCalendarOptions.creatorId = 2;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCalendarOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarOptions mockCalendarOptions = Substitute.For<ICalendarOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockCalendarOptions.calendarName = "Calendar";
            mockCalendarOptions.orgId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockCalendarOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockCalendarOptions.calendarName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarOptions, typeof(ICalendarOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICalendarID

        [TestMethod]
        public void Validation_IsValidWithICalendarID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockCalendarID.calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, mockCalendarID.calendarId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarID, typeof(ICalendarID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockCalendarID.calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, mockCalendarID.calendarId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarID, typeof(ICalendarID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICalendarID_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarID mockCalendarID = Substitute.For<ICalendarID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockCalendarID.calendarId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, mockCalendarID.calendarId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarID, typeof(ICalendarID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIFileID

        [TestMethod]
        public void Validation_IsValidWithIFileID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileID mockFileID = Substitute.For<IFileID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockFileID.fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileID.fileId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileID, typeof(IFileID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileID mockFileID = Substitute.For<IFileID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockFileID.fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileID.fileId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileID, typeof(IFileID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileID_IsValidFileIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileID mockFileID = Substitute.For<IFileID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockFileID.fileId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileID.fileId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileID, typeof(IFileID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIComponentOptions

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_ComponentExpiryUTCInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentOptions_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentOptions mockComponentOptions = Substitute.For<IComponentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentOptions.orgId = 1;
            mockComponentOptions.componentName = "componentName";
            mockComponentOptions.latitude = 1;
            mockComponentOptions.longitude = 10000;
            mockComponentOptions.componentExpiry_UTC = "2017-01-13T10:02:59.0000000Z";
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockComponentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockComponentOptions.componentName).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockComponentOptions.componentExpiry_UTC).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockComponentOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockComponentOptions.longitude).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentOptions, typeof(IComponentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIComponentID

        [TestMethod]
        public void Validation_IsValidWithIComponentID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentID mockComponentID = Substitute.For<IComponentID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentID.componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Component_ID(mockComponentID.componentId).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockComponentID, typeof(IComponentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentID mockComponentID = Substitute.For<IComponentID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentID.componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Component_ID(mockComponentID.componentId).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentID, typeof(IComponentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComponentID_IsValidComponentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComponentID mockComponentID = Substitute.For<IComponentID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockComponentID.componentId = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComponentID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Component_ID(mockComponentID.componentId).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComponentID, typeof(IComponentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIICalendarIDList

        [TestMethod]
        public void Validation_IsValidWithIICalendarIDList()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarIDList mockCalendarIDList = Substitute.For<ICalendarIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> calendarIdList = Substitute.For<List<int>>();
            int calId = 1;
            calendarIdList.Add(calId);
            mockCalendarIDList.calendarIdList = calendarIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarIDList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarIDList, typeof(ICalendarIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIICalendarIDList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarIDList mockCalendarIDList = Substitute.For<ICalendarIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> calendarIdList = Substitute.For<List<int>>();
            int calId = 1;
            calendarIdList.Add(calId);
            mockCalendarIDList.calendarIdList = calendarIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarIDList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarIDList, typeof(ICalendarIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIICalendarIDList_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICalendarIDList mockCalendarIDList = Substitute.For<ICalendarIDList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            List<int> calendarIdList = Substitute.For<List<int>>();
            int calId = 1;
            calendarIdList.Add(calId);
            mockCalendarIDList.calendarIdList = calendarIdList;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCalendarIDList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCalendarIDList, typeof(ICalendarIDList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithILocation

        [TestMethod]
        public void Validation_IsValidWithILocation()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLoc = Substitute.For<ILocation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockLoc.latitude = 1;
            mockLoc.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLoc, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockLoc.latitude).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Longitude(mockLoc.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockLoc, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocation_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLoc = Substitute.For<ILocation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockLoc.latitude = 1;
            mockLoc.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLoc, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockLoc.latitude).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Longitude(mockLoc.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockLoc, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocation_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLoc = Substitute.For<ILocation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockLoc.latitude = 1;
            mockLoc.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLoc, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockLoc.latitude).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Longitude(mockLoc.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockLoc, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocation_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocation mockLoc = Substitute.For<ILocation>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockLoc.latitude = 1;
            mockLoc.longitude = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLoc, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockLoc.latitude).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Longitude(mockLoc.longitude).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockLoc, typeof(ILocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithITSO

        [TestMethod]
        public void Validation_IsValidWithITSO()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils,  mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidExceptionIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidRepeatIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory ,mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);

            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITSO_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();
            
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSO mockITSO = Substitute.For<ITSO>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockITSO.start = "2017-01-13T10:02:59.0000000Z";
            mockITSO.end = "2017-01-13T10:07:59.0000000Z";
            mockITSO.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITSO.durationMilliseconds = 60000;
            mockITSO.orgId = 1;
            mockITSO.repeatId = 1;

            mockITSO.exceptionId = 1;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSO, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITSO.exceptionId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITSO.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITSO.repeatId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockITSO.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockITSO.end).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockITSO.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITSO.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockITSO.tsoId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSO, typeof(ITSO));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithILocationLimit

        [TestMethod]
        public void Validation_IsValidWithILocationLimit()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            { 
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory , mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILocationLimit_IsValidSearchRangeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILocationLimit mockLocationLimit = Substitute.For<ILocationLimit>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockLocationLimit.latitude = 1;
            mockLocationLimit.longitude = 1;
            mockLocationLimit.limitInMeters = 1;
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLocationLimit, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockLocationLimit.latitude).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Longitude(mockLocationLimit.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SearchRange(mockLocationLimit.limitInMeters).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory ,mockLocationLimit, typeof(ILocationLimit));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITSOOptionsList
        
        [TestMethod]
        public void Validation_IsValidWithITsoOptionsList()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOOptionsList mockITSOOptionsList = Substitute.For<ITSOOptionsList>();

            List<ITsoOptions> mockListITsoOptions = Substitute.For<List<ITsoOptions>>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockListITsoOptions.Add(mockITsoOptions);

            mockITSOOptionsList.listOfTSOOptions = mockListITsoOptions;
            mockITsoOptions.start = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOOptionsList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            //mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});


            //mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            //{
            //    return true;
            //});
            //mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            //{
            //    return true;
            //});
            //mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            //{
            //    return true;
            //});

            //IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            //mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            // mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            //{
            //    return true;
            //});

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions)).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOOptionsList, typeof(ITSOOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptionsList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);






            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOOptionsList mockITSOOptionsList = Substitute.For<ITSOOptionsList>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            List<ITsoOptions> mockListITsoOptions = Substitute.For<List<ITsoOptions>>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();

            mockListITsoOptions.Add(mockITsoOptions);

            mockITSOOptionsList.listOfTSOOptions = mockListITsoOptions;
            mockITsoOptions.start = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOOptionsList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            //mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});


            //mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            //{
            //    return true;
            //});
            //mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            //{
            //    return true;
            //});
            //mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            //{
            //    return true;
            //});

            //IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            //mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            // mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            //{
            //    return true;
            //});

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions)).Returns(x =>
            {
                return true;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockITSOOptionsList, typeof(ITSOOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITsoOptionsList_IsValidInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITSOOptionsList mockITSOOptionsList = Substitute.For<ITSOOptionsList>();

            List<ITsoOptions> mockListITsoOptions = Substitute.For<List<ITsoOptions>>();
            ITsoOptions mockITsoOptions = Substitute.For<ITsoOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockListITsoOptions.Add(mockITsoOptions);

            mockITSOOptionsList.listOfTSOOptions = mockListITsoOptions;
            mockITsoOptions.start = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockITsoOptions.dateOfGeneration = "2017-01-13T10:02:59.0000000Z";
            mockITsoOptions.durationMilliseconds = 60000;
            mockITsoOptions.orgId = 1;
            mockITsoOptions.repeatId = 1;

            mockITsoOptions.exceptionId = 1;



            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();
            mockRepeatOptions.repeatDay = 1;
            mockRepeatOptions.repeatType = ENUM_Repeat_Type.Daily;
            mockRepeatOptions.repeatMonth = 1;
            mockRepeatOptions.repeatWeek = 1;
            List<int> repeatWeekDays = Substitute.For<List<int>>();
            int repeatWeekDay = 1;
            repeatWeekDays.Add(repeatWeekDay);
            mockRepeatOptions.repeatWeekDays = repeatWeekDays;
            mockRepeatOptions.maxOccurances = 10;
            mockRepeatOptions.start = "2017-01-13T10:02:59.0000000Z";
            mockRepeatOptions.end = "2017-01-13T10:07:59.0000000Z";
            mockRepeatOptions.modifier = 1;
            mockRepeatOptions.orgId = 10;
            mockRepeatOptions.creatorId = 2;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockITSOOptionsList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            //mockNumbers.Is_Valid_Exception_ID(mockCoreProject, mockITsoOptions.exceptionId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockITsoOptions.orgId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});

            //mockNumbers.Is_Valid_Repeat_ID(mockCoreProject, mockITsoOptions.repeatId, mockCoreDb).Returns(x =>
            //{
            //    return true;
            //});


            //mockStrings.Is_Valid_DateTime_String(mockITsoOptions.start).Returns(x =>
            //{
            //    return true;
            //});
            //mockStrings.Is_Valid_DateTime_String(mockITsoOptions.end).Returns(x =>
            //{
            //    return true;
            //});
            //mockNumbers.Is_Valid_MsDuration(mockITsoOptions.durationMilliseconds).Returns(x =>
            //{
            //    return true;
            //});

            //IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            //mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.start).Value;
            //mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockITsoOptions.end).Value;
            // mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            //{
            //    return true;
            //});

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITsoOptions, typeof(ITsoOptions)).Returns(x =>
            {
                return false;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockITSOOptionsList, typeof(ITSOOptionsList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITimeZoneIANA

        [TestMethod]
        public void Validation_IsValidWithITimeZoneIANA()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeZoneIANA mockTimeZoneIANA = Substitute.For<ITimeZoneIANA>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeZoneIANA.timeZoneIANA = "America/Boise";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeZoneIANA, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockTimeZoneIANA.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeZoneIANA, typeof(ITimeZoneIANA));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeZoneIANA_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeZoneIANA mockTimeZoneIANA = Substitute.For<ITimeZoneIANA>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeZoneIANA.timeZoneIANA = "America/Boise";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeZoneIANA, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockTimeZoneIANA.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeZoneIANA, typeof(ITimeZoneIANA));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithITimeZoneIANA_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeZoneIANA mockTimeZoneIANA = Substitute.For<ITimeZoneIANA>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeZoneIANA.timeZoneIANA = "America/Boise";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeZoneIANA, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockTimeZoneIANA.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeZoneIANA, typeof(ITimeZoneIANA));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIEmailAddress
        [TestMethod]
        public void Validation_IsValidWithIEmailAddress()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailAddress mockEmailAddress = Substitute.For<IEmailAddress>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockEmailAddress.emailAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockEmailAddress.emailAddress).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailAddress, typeof(IEmailAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailAddress_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailAddress mockEmailAddress = Substitute.For<IEmailAddress>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockEmailAddress.emailAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_EmailAddress(mockEmailAddress.emailAddress).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockEmailAddress, typeof(IEmailAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailAddress_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailAddress mockEmailAddress = Substitute.For<IEmailAddress>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailAddress.emailAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockEmailAddress.emailAddress).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockEmailAddress, typeof(IEmailAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIEmailID
        [TestMethod]
        public void Validation_IsValidWithIEmailID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailID mockEmailID = Substitute.For<IEmailID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailID.emailId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Email_To_Send_ID(mockCoreProject, mockEmailID.emailId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockEmailID, typeof(IEmailID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailID mockEmailID = Substitute.For<IEmailID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailID.emailId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Email_To_Send_ID(mockCoreProject, mockEmailID.emailId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailID, typeof(IEmailID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailID_IsValidEmailToSendIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailID mockEmailID = Substitute.For<IEmailID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailID.emailId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Email_To_Send_ID(mockCoreProject, mockEmailID.emailId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailID, typeof(IEmailID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIEmailOptions

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsValidEmailMessageInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailOptions_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailOptions mockEmailOptions = Substitute.For<IEmailOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockEmailOptions.emailMessage = "Email Message";
            mockEmailOptions.emailSubject = "Email Subject";
            mockEmailOptions.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Email_Message(mockEmailOptions.emailMessage).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_String(mockEmailOptions.emailSubject).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_EmailAddress(mockEmailOptions.toAddress).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailOptions, typeof(IEmailOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIEmailTo
        [TestMethod]
        public void Validation_IsValidWithIEmailTo()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailTo mockEmailTo = Substitute.For<IEmailTo>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailTo.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailTo, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_EmailAddress(mockEmailTo.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockEmailTo, typeof(IEmailTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailTo_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailTo mockEmailTo = Substitute.For<IEmailTo>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockEmailTo.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailTo, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_EmailAddress(mockEmailTo.toAddress).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockEmailTo, typeof(IEmailTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIEmailTo_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IEmailTo mockEmailTo = Substitute.For<IEmailTo>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockEmailTo.toAddress = "xyz@gmail.com";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockEmailTo, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_EmailAddress(mockEmailTo.toAddress).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockEmailTo, typeof(IEmailTo));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIGuidStr
        [TestMethod]
        public void Validation_IsValidWithIGuidStr()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGuidStr mockGuidStr = Substitute.For<IGuidStr>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockGuidStr.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGuidStr, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockGuidStr.guidStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockGuidStr, typeof(IGuidStr));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGuidStr_IsBelongingToOrgInvlaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGuidStr mockGuidStr = Substitute.For<IGuidStr>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockGuidStr.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGuidStr, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_GUID_String(mockGuidStr.guidStr).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockGuidStr, typeof(IGuidStr));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGuidStr_IsValidGuidStrInvlaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGuidStr mockGuidStr = Substitute.For<IGuidStr>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockGuidStr.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGuidStr, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockGuidStr.guidStr).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockGuidStr, typeof(IGuidStr));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIName
        [TestMethod]
        public void Validation_IsValidWithIName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IName mockName = Substitute.For<IName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockName.name = "john";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockName.name).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockName, typeof(IName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IName mockName = Substitute.For<IName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockName.name = "john";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockName.name).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockName, typeof(IName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIName_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IName mockName = Substitute.For<IName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockName.name = "john";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockName.name).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockName, typeof(IName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDescription
        [TestMethod]
        public void Validation_IsValidWithIDescription()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDescription mockDescription = Substitute.For<IDescription>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDescription.description = "Description";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDescription, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDescription.description).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDescription, typeof(IDescription));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDescription_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            IDescription mockDescription = Substitute.For<IDescription>();


            mockDescription.description = "Description";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDescription, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDescription.description).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDescription, typeof(IDescription));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDescription_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDescription mockDescription = Substitute.For<IDescription>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDescription.description = "Description";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDescription, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDescription.description).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDescription, typeof(IDescription));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDescription
        [TestMethod]
        public void Validation_IsValidWithICost()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCost, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCost, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCost, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCost, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICost_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICost mockCost = Substitute.For<ICost>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockCost.monetaryAmount = 1;
            mockCost.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCost, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockCost.monetaryAmount, mockCost.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockCost.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockCost.monetaryCurrency).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCost, typeof(ICost));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITaxRate
        [TestMethod]
        public void Validation_IsValidWithITaxRate()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITaxRate mockTaxRate = Substitute.For<ITaxRate>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockTaxRate.taxRate = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTaxRate, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockTaxRate.taxRate).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTaxRate, typeof(ITaxRate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITaxRate_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITaxRate mockTaxRate = Substitute.For<ITaxRate>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockTaxRate.taxRate = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTaxRate, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TaxRate(mockTaxRate.taxRate).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockTaxRate, typeof(ITaxRate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITaxRate_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITaxRate mockTaxRate = Substitute.For<ITaxRate>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTaxRate.taxRate = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTaxRate, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockTaxRate.taxRate).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTaxRate, typeof(ITaxRate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIServiceId
        [TestMethod]
        public void Validation_IsValidWithIServiceId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceId mockServiceID = Substitute.For<IServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceID.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceID.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceID, typeof(IServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceId mockServiceID = Substitute.For<IServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceID.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceID.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceID, typeof(IServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceId_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceId mockServiceID = Substitute.For<IServiceId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceID.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceID.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceID, typeof(IServiceId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFirstName
        [TestMethod]
        public void Validation_IsValidWithIFirstName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFirstName mockFirstName = Substitute.For<IFirstName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFirstName.contactFirstName = "FirstName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFirstName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockFirstName.contactFirstName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFirstName, typeof(IFirstName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFirstName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFirstName mockFirstName = Substitute.For<IFirstName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFirstName.contactFirstName = "FirstName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFirstName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockFirstName.contactFirstName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils ,mockCoreFactory, mockFirstName, typeof(IFirstName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFirstName_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFirstName mockFirstName = Substitute.For<IFirstName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFirstName.contactFirstName = "FirstName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFirstName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockFirstName.contactFirstName).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFirstName, typeof(IFirstName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithILastName
        [TestMethod]
        public void Validation_IsValidWithILastName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILastName mockLastName = Substitute.For<ILastName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockLastName.contactLastName = "LastName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLastName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockLastName.contactLastName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockLastName, typeof(ILastName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILastName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILastName mockLastName = Substitute.For<ILastName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockLastName.contactLastName = "LastName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLastName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockLastName.contactLastName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockLastName, typeof(ILastName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithILastName_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ILastName mockLastName = Substitute.For<ILastName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockLastName.contactLastName = "LastName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockLastName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockLastName.contactLastName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockLastName, typeof(ILastName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIContactId
        [TestMethod]
        public void Validation_IsValidWithIContactId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactId mockContactID = Substitute.For<IContactId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockContactID.contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockContactID.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockContactID, typeof(IContactId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactId mockContactID = Substitute.For<IContactId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockContactID.contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockContactID.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockContactID, typeof(IContactId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactId_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactId mockContactID = Substitute.For<IContactId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockContactID.contactId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockContactID.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactID, typeof(IContactId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrgName

        [TestMethod]
        public void Validation_IsValidWithIOrgName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgName mockOrgName = Substitute.For<IOrgName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgName.orgName = "OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockOrgName.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgName, typeof(IOrgName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgName mockOrgName = Substitute.For<IOrgName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgName.orgName = "OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_String(mockOrgName.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrgName, typeof(IOrgName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgName_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgName mockOrgName = Substitute.For<IOrgName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgName.orgName = "OrgName";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockOrgName.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgName, typeof(IOrgName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithMoneyValue

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            
            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyValue_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyValue mockMoneyValue = Substitute.For<IMoneyValue>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockMoneyValue.monetaryAmount = 1;
            mockMoneyValue.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMoneyValue, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockMoneyValue.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockMoneyValue.monetaryCurrency).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockMoneyValue, typeof(IMoneyValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithISalesPrice
        [TestMethod]
        public void Validation_IsValidWithISalesPrice()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISalesPrice mockSalesPrice = Substitute.For<ISalesPrice>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockSalesPrice.monetaryAmount = 1;
            mockSalesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockSalesPrice, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockSalesPrice.monetaryAmount).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockSalesPrice, typeof(ISalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISalesPrice_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISalesPrice mockSalesPrice = Substitute.For<ISalesPrice>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockSalesPrice.monetaryAmount = 1;
            mockSalesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockSalesPrice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockSalesPrice.monetaryAmount).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockSalesPrice, typeof(ISalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISalesPrice_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISalesPrice mockSalesPrice = Substitute.For<ISalesPrice>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockSalesPrice.monetaryAmount = 1;
            mockSalesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockSalesPrice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockSalesPrice.monetaryAmount).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockSalesPrice, typeof(ISalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithITimeDuration

        [TestMethod]
        public void Validation_IsValidWithITimeDuration()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeDuration mockTimeDuration = Substitute.For<ITimeDuration>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeDuration.durationMilliseconds = 60000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeDuration, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockTimeDuration.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockTimeDuration, typeof(ITimeDuration));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeDuration_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeDuration mockTimeDuration = Substitute.For<ITimeDuration>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeDuration.durationMilliseconds = 60000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeDuration, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockTimeDuration.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTimeDuration, typeof(ITimeDuration));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITimeDuration_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITimeDuration mockTimeDuration = Substitute.For<ITimeDuration>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTimeDuration.durationMilliseconds = 60000;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTimeDuration, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockTimeDuration.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockTimeDuration, typeof(ITimeDuration));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIFileUploadStream
        
        [TestMethod]
        public void Validation_IsValidWithIFileUploadStream()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IFileUploadStream mockFileUploadStream = Substitute.For<IFileUploadStream>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
          
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileUploadStream, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileUploadStream, typeof(IFileUploadStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileUploadStream_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileUploadStream mockFileUploadStream = Substitute.For<IFileUploadStream>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileUploadStream, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFileUploadStream, typeof(IFileUploadStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFileOptions

        [TestMethod]
        public void Validation_IsValidWithIFileOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidFileExtensionInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidFileNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileOptions_IsValidSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileOptions mockFileOptions = Substitute.For<IFileOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileOptions.createdByUserId = 1;
            mockFileOptions.fileExtension = "txt";
            mockFileOptions.fileName = "test";
            mockFileOptions.orgId = 1;
            mockFileOptions.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileOptions.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileOptions.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileOptions.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileOptions.sha256).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileOptions, typeof(IFileOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFileName

        [TestMethod]
        public void Validation_IsValidWithIFileName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileName mockFileName = Substitute.For<IFileName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileName.fileName = "FileName";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileName.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileName, typeof(IFileName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem,mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileName mockFileName = Substitute.For<IFileName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileName.fileName = "FileName";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_File_Name(mockFileName.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFileName, typeof(IFileName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileName_IsValidFileNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileName mockFileName = Substitute.For<IFileName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileName.fileName = "FileName";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileName.fileName, mockCoreSc).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFileName, typeof(IFileName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIFileExtension

        [TestMethod]
        public void Validation_IsValidWithIFileExtension()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem,mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileExtension mockFileExtension = Substitute.For<IFileExtension>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileExtension.fileExtension = "txt";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileExtension, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileExtension.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileExtension, typeof(IFileExtension));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileExtension_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileExtension mockFileExtension = Substitute.For<IFileExtension>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileExtension.fileExtension = "txt";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileExtension, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_File_Extension(mockFileExtension.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileExtension, typeof(IFileExtension));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileExtension_IsValidFileExtensionInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileExtension mockFileExtension = Substitute.For<IFileExtension>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileExtension.fileExtension = "txt";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileExtension, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileExtension.fileExtension, mockCoreSc).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockFileExtension, typeof(IFileExtension));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICreatedBy

        [TestMethod]
        public void Validation_IsValidWithICreatedBy()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedBy mockCreatedBy = Substitute.For<ICreatedBy>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatedBy, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreatedBy.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCreatedBy, typeof(ICreatedBy));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedBy_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedBy mockCreatedBy = Substitute.For<ICreatedBy>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatedBy, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreatedBy.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreatedBy, typeof(ICreatedBy));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedBy_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedBy mockCreatedBy = Substitute.For<ICreatedBy>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatedBy, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockCreatedBy.createdByUserId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCreatedBy, typeof(ICreatedBy));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion
        // creating function
        #region IsValidWithIFileWriteCoreAction

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidFileExtensionInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidFileNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileWriteCoreAction_IsValidSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileWriteCoreAction mockFileWriteCoreAction = Substitute.For<IFileWriteCoreAction>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileWriteCoreAction.createdByUserId = 1;
            mockFileWriteCoreAction.fileExtension = "txt";
            mockFileWriteCoreAction.fileName = "test";
            mockFileWriteCoreAction.orgId = 1;
            mockFileWriteCoreAction.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";
            mockFileWriteCoreAction.coreAction = ENUM_Core_Function.CF_createComponent;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileWriteCoreAction, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileWriteCoreAction.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Extension(mockFileWriteCoreAction.fileExtension, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_File_Name(mockFileWriteCoreAction.fileName, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockFileWriteCoreAction.createdByUserId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_SHA256_String(mockFileWriteCoreAction.sha256).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileWriteCoreAction, typeof(IFileWriteCoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithICoreAction

        [TestMethod]
        public void Validation_IsValidWithICoreAction()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICoreAction mockCoreAction = Substitute.For<ICoreAction>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCoreAction.coreAction = ENUM_Core_Function.readTempPaypal;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCoreAction, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCoreAction, typeof(ICoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICoreAction_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICoreAction mockCoreAction = Substitute.For<ICoreAction>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCoreAction.coreAction = ENUM_Core_Function.readTempPaypal;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCoreAction, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCoreAction, typeof(ICoreAction));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIStream

        [TestMethod]
        public void Validation_IsValidWithIStream()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IStream mockStream = Substitute.For<IStream>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockStream.streamData = Stream.Null;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockStream, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockStream, typeof(IStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIStream_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IStream mockStream = Substitute.For<IStream>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockStream.streamData = Stream.Null;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockStream, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockStream, typeof(IStream));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithISha256

        [TestMethod]
        public void Validation_IsValidWithISha256()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISha256 mockStream = Substitute.For<ISha256>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockStream.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockStream, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_SHA256_String(mockStream.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockStream, typeof(ISha256));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISha256_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISha256 mockStream = Substitute.For<ISha256>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockStream.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockStream, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_SHA256_String(mockStream.sha256).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockStream, typeof(ISha256));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithISha256_IsValidSHA256StringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ISha256 mockStream = Substitute.For<ISha256>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockStream.sha256 = "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"; ;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockStream, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_SHA256_String(mockStream.sha256).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockStream, typeof(ISha256));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region IsValidWithIFileServiceMap

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsValidFileIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceMap_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceMap mockFileServiceMap = Substitute.For<IFileServiceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockFileServiceMap.fileId = 1;
            mockFileServiceMap.orgId = 1;
            mockFileServiceMap.isActive = ENUM_Activation_State.Activated;
            mockFileServiceMap.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceMap.fileId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockFileServiceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceMap, typeof(IFileServiceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIIsActive

        [TestMethod]
        public void Validation_IsValidWithIIsActive()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsActive mockIsActive = Substitute.For<IIsActive>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockIsActive.isActive = ENUM_Activation_State.Inactive;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockIsActive, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockIsActive, typeof(IIsActive));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIIsActive_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsActive mockIsActive = Substitute.For<IIsActive>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockIsActive.isActive = ENUM_Activation_State.Inactive;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockIsActive, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockIsActive, typeof(IIsActive));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAddressID

        [TestMethod]
        public void Validation_IsValidWithIAddressID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressID mockAddressID = Substitute.For<IAddressID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAddressID.addressId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockAddressID.addressId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockAddressID, typeof(IAddressID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressID_IsBelongingToOrgInvalid() 

        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressID mockAddressID = Substitute.For<IAddressID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAddressID.addressId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockAddressID.addressId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressID, typeof(IAddressID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAddressID_IsValidAddressIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAddressID mockAddressID = Substitute.For<IAddressID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAddressID.addressId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAddressID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockAddressID.addressId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAddressID, typeof(IAddressID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithICountryLocation

        [TestMethod]
        public void Validation_IsValidWithICountryLocation()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICountryLocation mockCountryLocation = Substitute.For<ICountryLocation>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockCountryLocation.country = Enum_SYS_Country_Location.USA;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCountryLocation, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCountryLocation, typeof(ICountryLocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICountryLocation_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICountryLocation mockCountryLocation = Substitute.For<ICountryLocation>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCountryLocation.country = Enum_SYS_Country_Location.USA;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCountryLocation, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCountryLocation, typeof(ICountryLocation));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrderID

        [TestMethod]
        public void Validation_IsValidWithIOrderID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderID mockOrderID = Substitute.For<IOrderID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrderID.orderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrderID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrderID, typeof(IOrderID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrderID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderID mockOrderID = Substitute.For<IOrderID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrderID.orderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrderID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrderID, typeof(IOrderID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPerformedByResourceID

        [TestMethod]
        public void Validation_IsValidWithIPerformedByResourceID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPerformedByResourceID mockPerformedByResourceID = Substitute.For<IPerformedByResourceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPerformedByResourceID.performedByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPerformedByResourceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockPerformedByResourceID.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPerformedByResourceID, typeof(IPerformedByResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPerformedByResourceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPerformedByResourceID mockPerformedByResourceID = Substitute.For<IPerformedByResourceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPerformedByResourceID.performedByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPerformedByResourceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockPerformedByResourceID.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPerformedByResourceID, typeof(IPerformedByResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPerformedByResourceID_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPerformedByResourceID mockPerformedByResourceID = Substitute.For<IPerformedByResourceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPerformedByResourceID.performedByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPerformedByResourceID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockPerformedByResourceID.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPerformedByResourceID, typeof(IPerformedByResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRequireResourceID

        [TestMethod]
        public void Validation_IsValidWithIRequireResourceID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRequireResourceID mockRequireResourceID = Substitute.For<IRequireResourceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRequireResourceID.requireResourceByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRequireResourceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockRequireResourceID.requireResourceByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRequireResourceID, typeof(IRequireResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRequireResourceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRequireResourceID mockRequireResourceID = Substitute.For<IRequireResourceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRequireResourceID.requireResourceByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRequireResourceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockRequireResourceID.requireResourceByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRequireResourceID, typeof(IRequireResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRequireResourceID_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRequireResourceID mockRequireResourceID = Substitute.For<IRequireResourceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRequireResourceID.requireResourceByResourceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRequireResourceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockRequireResourceID.requireResourceByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRequireResourceID, typeof(IRequireResourceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region Interface haves been removed

        //#region IsValidWithICustomerID

        //[TestMethod]
        //public void Validation_IsValidWithICustomerID()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    ICustomerID mockCustomerID = Substitute.For<ICustomerID>();

        //    mockCustomerID.customerId = 1;


        //    // ---------- Arrange--------------

        //    //----------- Act -----------------

        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerID, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockCustomerID.customerId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerID, typeof(ICustomerID));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(true, returnValue);

        //    //---------- Assert----------------
        //}

        //[TestMethod]
        //public void Validation_IsValidWithICustomerID_IsBelongingToOrgInvalid()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    ICustomerID mockCustomerID = Substitute.For<ICustomerID>();

        //    mockCustomerID.customerId = 1;


        //    // ---------- Arrange--------------

        //    //----------- Act -----------------

        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerID, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return false;
        //    });

        //    mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockCustomerID.customerId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerID, typeof(ICustomerID));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(false, returnValue);

        //    //---------- Assert----------------
        //}

        //[TestMethod]
        //public void Validation_IsValidWithICustomerID_IsValidResourceIDInvalid()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    ICustomerID mockCustomerID = Substitute.For<ICustomerID>();

        //    mockCustomerID.customerId = 1;


        //    // ---------- Arrange--------------

        //    //----------- Act -----------------

        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerID, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockCustomerID.customerId, mockCoreDb).Returns(x =>
        //    {
        //        return false;
        //    });

        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerID, typeof(ICustomerID));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(false, returnValue);

        //    //---------- Assert----------------
        //}

        //#endregion

        //#region IsValidWithIOrgCustomerOrderOptions

        //[TestMethod]
        //public void Validation_IsValidWithIOrgCustomerOrderOptions()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

        //    mockOrgCustomerOrderOptions.customerId = 1;
        //    mockOrgCustomerOrderOptions.orgId = 1;


        //    // ---------- Arrange--------------

        //    //----------- Act -----------------
        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });


        //    mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(true, returnValue);

        //    //---------- Assert----------------
        //}

        //[TestMethod]
        //public void Validation_IsValidWithIOrgCustomerOrderOptions_IsBelongingToOrgInvalid()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

        //    mockOrgCustomerOrderOptions.customerId = 1;
        //    mockOrgCustomerOrderOptions.orgId = 1;


        //    // ---------- Arrange--------------

        //    //----------- Act -----------------
        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return false;
        //    });

        //    mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });


        //    mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(false, returnValue);

        //    //---------- Assert----------------
        //}

        //[TestMethod]
        //public void Validation_IsValidWithIOrgCustomerOrderOptions_IsValidOrgIDInvalid()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

        //    mockOrgCustomerOrderOptions.customerId = 1;
        //    mockOrgCustomerOrderOptions.orgId = 1;


        //    // ---------- Arrange--------------

        //    //----------- Act -----------------
        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
        //    {
        //        return false;
        //    });


        //    mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(false, returnValue);

        //    //---------- Assert----------------
        //}

        //[TestMethod]
        //public void Validation_IsValidWithIOrgCustomerOrderOptions_IsValidResourceIDInvalid()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    IOrgCustomerOrderOptions mockOrgCustomerOrderOptions = Substitute.For<IOrgCustomerOrderOptions>();

        //    mockOrgCustomerOrderOptions.customerId = 1;
        //    mockOrgCustomerOrderOptions.orgId = 1;


        //    // ---------- Arrange--------------

        //    //----------- Act -----------------
        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgCustomerOrderOptions, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });

        //    mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrgCustomerOrderOptions.orgId, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });


        //    mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockOrgCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
        //    {
        //        return false;
        //    });

        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockOrgCustomerOrderOptions, typeof(IOrgCustomerOrderOptions));

        //    //----------- Act -----------------

        //    //---------- Assert----------------
        //#region IsValidWithICustomerOrderOptions

        //        [TestMethod]
        //        public void Validation_IsValidWithICustomerOrderOptions()
        //        {
        //            // ---------- Arrange--------------

        //            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //            IValidationDates mockDates = Substitute.For<IValidationDates>();
        //            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //            IUtils mockUtils = Substitute.For<IUtils>();

        //            IOrgID mockOrgID = Substitute.For<IOrgID>();
        //            ICustomerOrderOptions mockCustomerOrderOptions = Substitute.For<ICustomerOrderOptions>();

        //            mockCustomerOrderOptions.customerId = 1;
        //            mockCustomerOrderOptions.orderId = 1;

        //            // ---------- Arrange--------------

        //            //----------- Act -----------------


        //            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderOptions, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //            {
        //                return true;
        //            });

        //            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
        //            {
        //                return true;
        //            });

        //            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderOptions, typeof(ICustomerOrderOptions));

        //            //----------- Act -----------------

        //            //---------- Assert----------------

        //            Assert.AreEqual(true, returnValue);

        //            //---------- Assert----------------
        //        }

        //        [TestMethod]
        //        public void Validation_IsValidWithICustomerOrderOptions_IsBelongingToOrgInvalid()
        //        {
        //            // ---------- Arrange--------------

        //            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //            IValidationDates mockDates = Substitute.For<IValidationDates>();
        //            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //            IUtils mockUtils = Substitute.For<IUtils>();

        //            IOrgID mockOrgID = Substitute.For<IOrgID>();
        //            ICustomerOrderOptions mockCustomerOrderOptions = Substitute.For<ICustomerOrderOptions>();

        //            mockCustomerOrderOptions.customerId = 1;
        //            mockCustomerOrderOptions.orderId = 1;

        //            // ---------- Arrange--------------

        //            //----------- Act -----------------


        //            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderOptions, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //            {
        //                return false;
        //            });

        //            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
        //            {
        //                return true;
        //            });

        //            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderOptions, typeof(ICustomerOrderOptions));

        //            //----------- Act -----------------

        //            //---------- Assert----------------

        //            Assert.AreEqual(false, returnValue);

        //            //---------- Assert----------------
        //        }


        //        [TestMethod]
        //        public void Validation_IsValidWithICustomerOrderOptions_IsValidResourceIDInvalid()
        //        {
        //            // ---------- Arrange--------------

        //            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //            IValidationDates mockDates = Substitute.For<IValidationDates>();
        //            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //            IUtils mockUtils = Substitute.For<IUtils>();

        //            IOrgID mockOrgID = Substitute.For<IOrgID>();
        //            ICustomerOrderOptions mockCustomerOrderOptions = Substitute.For<ICustomerOrderOptions>();

        //            mockCustomerOrderOptions.customerId = 1;
        //            mockCustomerOrderOptions.orderId = 1;

        //            // ---------- Arrange--------------

        //            //----------- Act -----------------


        //            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderOptions, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //            {
        //                return true;
        //            });

        //            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockCustomerOrderOptions.customerId, mockCoreDb).Returns(x =>
        //            {
        //                return false;
        //            });

        //            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderOptions, typeof(ICustomerOrderOptions));

        //            //----------- Act -----------------

        //            //---------- Assert----------------

        //            Assert.AreEqual(false, returnValue);

        //            //---------- Assert----------------
        //        }

        //        #endregion
        //    Assert.AreEqual(false, returnValue);

        //    //---------- Assert----------------
        //}
        //#endregion

        //#region IsValidWithICustomerOrderID

        //[TestMethod]
        //public void Validation_IsValidWithICustomerOrderID()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    ICustomerOrderID mockCustomerOrderID = Substitute.For<ICustomerOrderID>();



        //    mockCustomerOrderID.Order_ID = 1;
        //    // ---------- Arrange--------------

        //    //----------- Act -----------------

        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderID, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return true;
        //    });



        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderID, typeof(ICustomerOrderID));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(true, returnValue);

        //    //---------- Assert----------------
        //}

        //[TestMethod]
        //public void Validation_IsValidWithICustomerOrderID_IsBelongingToOrgInvalid()
        //{
        //    // ---------- Arrange--------------

        //    IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
        //    IValidationDates mockDates = Substitute.For<IValidationDates>();
        //    IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
        //    IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
        //    IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
        //    IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
        //    IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
        //    IValidationSystem mockSystem = Substitute.For<IValidationSystem>();


        //    Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


        //    ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


        //    IUtils mockUtils = Substitute.For<IUtils>();

        //    IOrgID mockOrgID = Substitute.For<IOrgID>();
        //    ICustomerOrderID mockCustomerOrderID = Substitute.For<ICustomerOrderID>();



        //    mockCustomerOrderID.Order_ID = 1;
        //    // ---------- Arrange--------------

        //    //----------- Act -----------------

        //    mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCustomerOrderID, mockUtils, mockCoreSc, mockCoreDb).Returns(x =>
        //    {
        //        return false;
        //    });



        //    bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCustomerOrderID, typeof(ICustomerOrderID));

        //    //----------- Act -----------------

        //    //---------- Assert----------------

        //    Assert.AreEqual(false, returnValue);

        //    //---------- Assert----------------
        //}


        #endregion

        #region IsValidWithIOrderOptions

        [TestMethod]
        public void Validation_IsValidWithIOrderOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderOptions mockOrderOptions = Substitute.For<IOrderOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrderOptions.orderState = ENUM_SYS_Order_State.Invoiced;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrderOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrderOptions, typeof(IOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrderOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderOptions mockOrderOptions = Substitute.For<IOrderOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrderOptions.orderState = ENUM_SYS_Order_State.Invoiced;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrderOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrderOptions, typeof(IOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrderOptions_OrderStateUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrderOptions mockOrderOptions = Substitute.For<IOrderOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockOrderOptions.orderState = ENUM_SYS_Order_State.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrderOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrderOptions, typeof(IOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceOrderId

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderId mockServiceOrderId = Substitute.For<IServiceOrderId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderId.serviceOrderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockServiceOrderId.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderId, typeof(IServiceOrderId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderId_IsBelongingToOrgInavalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderId mockServiceOrderId = Substitute.For<IServiceOrderId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderId.serviceOrderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderId, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockServiceOrderId.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderId, typeof(IServiceOrderId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderId_IsValidServiceOrderIDInavalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderId mockServiceOrderId = Substitute.For<IServiceOrderId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderId.serviceOrderId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockServiceOrderId.serviceOrderId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderId, typeof(IServiceOrderId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIContactTitle

        [TestMethod]
        public void Validation_IsValidWithIContactTitle()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactTitle mockContactTitle = Substitute.For<IContactTitle>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockContactTitle.contactTitle = Enum_SYS_User_Title.Mrs;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactTitle, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactTitle, typeof(IContactTitle));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactTitle_ContactTitleUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactTitle mockContactTitle = Substitute.For<IContactTitle>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockContactTitle.contactTitle = Enum_SYS_User_Title.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactTitle, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactTitle, typeof(IContactTitle));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIContactTitle_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IContactTitle mockContactTitle = Substitute.For<IContactTitle>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockContactTitle.contactTitle = Enum_SYS_User_Title.Mrs;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockContactTitle, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockContactTitle, typeof(IContactTitle));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrijiAppGUID

        [TestMethod]
        public void Validation_IsValidWithIOrijiAppGUID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrijiAppGUID mockOrijiAppGUID = Substitute.For<IOrijiAppGUID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrijiAppGUID.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrijiAppGUID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockOrijiAppGUID.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrijiAppGUID, typeof(IOrijiAppGUID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrijiAppGUID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrijiAppGUID mockOrijiAppGUID = Substitute.For<IOrijiAppGUID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockOrijiAppGUID.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrijiAppGUID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_GUID_String(mockOrijiAppGUID.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrijiAppGUID, typeof(IOrijiAppGUID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrijiAppGUID_IsValidGuidStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrijiAppGUID mockOrijiAppGUID = Substitute.For<IOrijiAppGUID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrijiAppGUID.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrijiAppGUID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockOrijiAppGUID.applicationGUID).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrijiAppGUID, typeof(IOrijiAppGUID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRoleName

        [TestMethod]
        public void Validation_IsValidWithIRoleName()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleName mockRoleName = Substitute.For<IRoleName>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleName.roleName = "Admin";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleName, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Role_Name(mockRoleName.roleName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleName, typeof(IRoleName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleName_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleName mockRoleName = Substitute.For<IRoleName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleName.roleName = "Admin";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Role_Name(mockRoleName.roleName).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleName, typeof(IRoleName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleName_IsValidRoleNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleName mockRoleName = Substitute.For<IRoleName>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleName.roleName = "Admin";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleName, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Role_Name(mockRoleName.roleName).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRoleName, typeof(IRoleName));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRoleID

        [TestMethod]
        public void Validation_IsValidWithIRoleID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleID mockRoleID = Substitute.For<IRoleID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleID.roleId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Role_ID(mockCoreProject, mockRoleID.roleId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleID, typeof(IRoleID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleID mockRoleID = Substitute.For<IRoleID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleID.roleId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Role_ID(mockCoreProject, mockRoleID.roleId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleID, typeof(IRoleID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleID_IsValidRoleIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleID mockRoleID = Substitute.For<IRoleID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleID.roleId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Role_ID(mockCoreProject, mockRoleID.roleId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleID, typeof(IRoleID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPermissionList

        [TestMethod]
        public void Validation_IsValidWithIPermissionList()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPermissionList mockPermissionList = Substitute.For<IPermissionList>();

            List<ENUM_Core_Function> permissionList = Substitute.For<List<ENUM_Core_Function>>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ENUM_Core_Function permission = ENUM_Core_Function.CF_createComponent;
            permissionList.Add(permission);
            mockPermissionList.permissionList = permissionList;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPermissionList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPermissionList, typeof(IPermissionList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPermissionList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPermissionList mockPermissionList = Substitute.For<IPermissionList>();

            List<ENUM_Core_Function> permissionList = Substitute.For<List<ENUM_Core_Function>>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            ENUM_Core_Function permission = ENUM_Core_Function.CF_createComponent;
            permissionList.Add(permission);
            mockPermissionList.permissionList = permissionList;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPermissionList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPermissionList, typeof(IPermissionList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIRoleOptions

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions_IsValidRoleNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockUtils, mockCoreSc, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRoleOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRoleOptions mockRoleOptions = Substitute.For<IRoleOptions>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRoleOptions.orgId = 1;
            mockRoleOptions.roleName = "Role Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRoleOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Role_Name(mockRoleOptions.roleName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockRoleOptions.orgId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRoleOptions, typeof(IRoleOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIDeadline

        [TestMethod]
        public void Validation_IsValidWithIDeadline()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeadline mockDeadline = Substitute.For<IDeadline>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDeadline.deadline_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDeadline, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDeadline.deadline_UTC).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDeadline, typeof(IDeadline));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeadline_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeadline mockDeadline = Substitute.For<IDeadline>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDeadline.deadline_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDeadline, mockUtils, mockCoreSc, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDeadline.deadline_UTC).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDeadline, typeof(IDeadline));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeadline_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeadline mockDeadline = Substitute.For<IDeadline>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDeadline.deadline_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDeadline, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDeadline.deadline_UTC).Returns(x =>
            {
                return false;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDeadline, typeof(IDeadline));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert---------------- 
        }

        #endregion

        #region IsValidWithICreatedOn

        [TestMethod]
        public void Validation_IsValidWithICreatedOn()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedOn mockCreatedOn = Substitute.For<ICreatedOn>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreatedOn.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatedOn, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockCreatedOn.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockCreatedOn, typeof(ICreatedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedOn_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedOn mockCreatedOn = Substitute.For<ICreatedOn>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreatedOn.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatedOn, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockCreatedOn.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreatedOn, typeof(ICreatedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithICreatedOn_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ICreatedOn mockCreatedOn = Substitute.For<ICreatedOn>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockCreatedOn.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockCreatedOn, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockCreatedOn.createdOn_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockCreatedOn, typeof(ICreatedOn));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDeliveryDate

        [TestMethod]
        public void Validation_IsValidWithIDeliveryDate()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeliveryDate mockDeliveryDate = Substitute.For<IDeliveryDate>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDeliveryDate.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDeliveryDate, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDeliveryDate.deliveryDate_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDeliveryDate, typeof(IDeliveryDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeliveryDate_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeliveryDate mockDeliveryDate = Substitute.For<IDeliveryDate>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDeliveryDate.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDeliveryDate, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDeliveryDate.deliveryDate_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDeliveryDate, typeof(IDeliveryDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDeliveryDate_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDeliveryDate mockDeliveryDate = Substitute.For<IDeliveryDate>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDeliveryDate.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDeliveryDate, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDeliveryDate.deliveryDate_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDeliveryDate, typeof(IDeliveryDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIReferenceString

        [TestMethod]
        public void Validation_IsValidWithIReferenceString()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IReferenceString mockReferenceString = Substitute.For<IReferenceString>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockReferenceString.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockReferenceString, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockReferenceString.reference).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockReferenceString, typeof(IReferenceString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIReferenceString_IsBelongingToOrgInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IReferenceString mockReferenceString = Substitute.For<IReferenceString>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockReferenceString.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockReferenceString, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockReferenceString.reference).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockReferenceString, typeof(IReferenceString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIReferenceString_IsValidStringInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IReferenceString mockReferenceString = Substitute.For<IReferenceString>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockReferenceString.reference = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockReferenceString, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockReferenceString.reference).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockReferenceString, typeof(IReferenceString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region  IsValidWithIDiscountComplete
        
        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsBelongingToOrgInvallid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockUtils, mockCoreSc, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDiscountComplete_IsValidCurrencyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDiscountComplete mockDiscountComplete = Substitute.For<IDiscountComplete>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDiscountComplete.orgId = 1;
            mockDiscountComplete.discountId = 1;
            mockDiscountComplete.discountType = ENUM_Discount_Type.currencyDiscount;
            mockDiscountComplete.name = "Name";
            mockDiscountComplete.monetaryAmount = 1;
            mockDiscountComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDiscountComplete.percentageValue = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDiscountComplete, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDiscountComplete.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDiscountComplete.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDiscountComplete.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDiscountComplete.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDiscountComplete, typeof(IDiscountComplete));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMonetaryAmount

        [TestMethod]
        public void Validation_IsValidWithIMonetaryAmount()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryAmount mockMonetaryAmount = Substitute.For<IMonetaryAmount>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMonetaryAmount.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMonetaryAmount, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockMonetaryAmount.monetaryAmount).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMonetaryAmount, typeof(IMonetaryAmount));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryAmount_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryAmount mockMonetaryAmount = Substitute.For<IMonetaryAmount>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMonetaryAmount.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMonetaryAmount, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockMonetaryAmount.monetaryAmount).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMonetaryAmount, typeof(IMonetaryAmount));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryAmount_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryAmount mockMonetaryAmount = Substitute.For<IMonetaryAmount>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMonetaryAmount.monetaryAmount = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMonetaryAmount, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockMonetaryAmount.monetaryAmount).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMonetaryAmount, typeof(IMonetaryAmount));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMonetaryCurrency

        [TestMethod]
        public void Validation_IsValidWithIMonetaryCurrency()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryCurrency mockMonetaryCurrency = Substitute.For<IMonetaryCurrency>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockMonetaryCurrency.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMonetaryCurrency, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockMonetaryCurrency.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils , mockCoreFactory, mockMonetaryCurrency, typeof(IMonetaryCurrency));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryCurrency_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryCurrency mockMonetaryCurrency = Substitute.For<IMonetaryCurrency>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMonetaryCurrency.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMonetaryCurrency, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockMonetaryCurrency.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMonetaryCurrency, typeof(IMonetaryCurrency));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMonetaryCurrency_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMonetaryCurrency mockMonetaryCurrency = Substitute.For<IMonetaryCurrency>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMonetaryCurrency.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMonetaryCurrency, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockMonetaryCurrency.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMonetaryCurrency, typeof(IMonetaryCurrency));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPercentageValue

        [TestMethod]
        public void Validation_IsValidWithIPercentageValue()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPercentageValue mockPercentageValue = Substitute.For<IPercentageValue>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPercentageValue.percentageValue = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPercentageValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPercentageValue, typeof(IPercentageValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPercentageValue_PercentageValueInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPercentageValue mockPercentageValue = Substitute.For<IPercentageValue>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPercentageValue.percentageValue = 101;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPercentageValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPercentageValue, typeof(IPercentageValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIInvoiceID

        [TestMethod]
        public void Validation_IsValidWithIInvoiceID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceID mockInvoiceID = Substitute.For<IInvoiceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceID.invoiceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceID.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceID, typeof(IInvoiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();


            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceID mockInvoiceID = Substitute.For<IInvoiceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceID.invoiceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceID.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceID, typeof(IInvoiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceID_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceID mockInvoiceID = Substitute.For<IInvoiceID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceID.invoiceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceID, mockUtils, mockCoreSc, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceID.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceID, typeof(IInvoiceID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIComputedSalesPrice

        [TestMethod]
        public void Validation_IsValidWithIComputedSalesPrice()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComputedSalesPrice mockComputedSalesPrice = Substitute.For<IComputedSalesPrice>();

            IMoneyValueComplete mockMoneyValueComplete = Substitute.For<IMoneyValueComplete>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMoneyValueComplete.monetaryAmount = 1;
            mockMoneyValueComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValueComplete.moneyString = "Money String";
            mockComputedSalesPrice.computedMoneyValue = mockMoneyValueComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComputedSalesPrice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyValue(mockComputedSalesPrice.computedMoneyValue).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComputedSalesPrice, typeof(IComputedSalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComputedSalesPrice_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComputedSalesPrice mockComputedSalesPrice = Substitute.For<IComputedSalesPrice>();

            IMoneyValueComplete mockMoneyValueComplete = Substitute.For<IMoneyValueComplete>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMoneyValueComplete.monetaryAmount = 1;
            mockMoneyValueComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValueComplete.moneyString = "Money String";
            mockComputedSalesPrice.computedMoneyValue = mockMoneyValueComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComputedSalesPrice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyValue(mockComputedSalesPrice.computedMoneyValue).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComputedSalesPrice, typeof(IComputedSalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIComputedSalesPrice_IsValidMoneyValueInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IComputedSalesPrice mockComputedSalesPrice = Substitute.For<IComputedSalesPrice>();

            IMoneyValueComplete mockMoneyValueComplete = Substitute.For<IMoneyValueComplete>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMoneyValueComplete.monetaryAmount = 1;
            mockMoneyValueComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockMoneyValueComplete.moneyString = "Money String";
            mockComputedSalesPrice.computedMoneyValue = mockMoneyValueComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockComputedSalesPrice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyValue(mockComputedSalesPrice.computedMoneyValue).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockComputedSalesPrice, typeof(IComputedSalesPrice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIInvoiceableItemOptions

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemOptions mockInvoiceableItemOptions = Substitute.For<IInvoiceableItemOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceableItemOptions.invoiceId = 1;
            mockInvoiceableItemOptions.monetaryAmount = 1;
            mockInvoiceableItemOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockInvoiceableItemOptions.orgId = 1;
            mockInvoiceableItemOptions.productId = 1;
            mockInvoiceableItemOptions.serviceOrderId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceableItemOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockInvoiceableItemOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockInvoiceableItemOptions.serviceOrderId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockInvoiceableItemOptions.invoiceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockInvoiceableItemOptions.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockInvoiceableItemOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemOptions, typeof(IInvoiceableItemOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIProductID

        [TestMethod]
        public void Validation_IsValidWithIProductID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductID mockProductID = Substitute.For<IProductID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockProductID.productId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockProductID.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockProductID, typeof(IProductID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductID mockProductID = Substitute.For<IProductID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockProductID.productId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockProductID.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockProductID, typeof(IProductID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductID_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductID mockProductID = Substitute.For<IProductID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockProductID.productId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockProductID.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockProductID, typeof(IProductID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaymentOptions

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentOptions mockPaymentOptions = Substitute.For<IPaymentOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentOptions.invoiceId = 1;
            mockPaymentOptions.monetaryAmount = 1;
            mockPaymentOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockPaymentOptions.orgId = 1;
            mockPaymentOptions.serviceOrderId = 1;
            mockPaymentOptions.paypalPaymentId = "123";
            mockPaymentOptions.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockPaymentOptions.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockPaymentOptions.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockPaymentOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockPaymentOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockPaymentOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockPaymentOptions.serviceOrderId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockPaymentOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentOptions.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockPaymentOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentOptions, typeof(IPaymentOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaymentDate

        [TestMethod]
        public void Validation_IsValidWithIPaymentDate()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentDate mockPaymentDate = Substitute.For<IPaymentDate>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentDate.paymentDate = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentDate, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentDate.paymentDate).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentDate, typeof(IPaymentDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentDate_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentDate mockPaymentDate = Substitute.For<IPaymentDate>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentDate.paymentDate = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentDate, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentDate.paymentDate).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentDate, typeof(IPaymentDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentDate_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentDate mockPaymentDate = Substitute.For<IPaymentDate>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentDate.paymentDate = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentDate, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockPaymentDate.paymentDate).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentDate, typeof(IPaymentDate));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaymentID

        [TestMethod]
        public void Validation_IsValidWithIPaymentId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentId mockPaymentId = Substitute.For<IPaymentId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentId.paymentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Payment_ID(mockCoreProject, mockPaymentId.paymentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentId, typeof(IPaymentId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentId mockPaymentId = Substitute.For<IPaymentId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentId.paymentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentId, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Payment_ID(mockCoreProject, mockPaymentId.paymentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentId, typeof(IPaymentId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaymentId_IsValidPaymentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaymentId mockPaymentId = Substitute.For<IPaymentId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaymentId.paymentId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaymentId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Payment_ID(mockCoreProject, mockPaymentId.paymentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaymentId, typeof(IPaymentId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion



        #region IsValidWithIServiceFulfilmentConfigOptions
       
        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_AdvancedOrBasic(mockServiceFulfilmentConfigOptions).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigOptions mockServiceFulfilmentConfigOptions = Substitute.For<IServiceFulfilmentConfigOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigOptions.orgId = 1;
            mockServiceFulfilmentConfigOptions.isActive = ENUM_Activation_State.Activated;
            mockServiceFulfilmentConfigOptions.name = "Name";
            mockServiceFulfilmentConfigOptions.numberOfRequiredResources = 1;
            mockServiceFulfilmentConfigOptions.serviceId = 1;
            mockServiceFulfilmentConfigOptions.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockServiceFulfilmentConfigOptions.name).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigOptions, typeof(IServiceFulfilmentConfigOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceFulfilmentConfigResourceMapID

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapID mockServiceFulfilmentConfigResourceMapID = Substitute.For<IServiceFulfilmentConfigResourceMapID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapID, typeof(IServiceFulfilmentConfigResourceMapID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapID mockServiceFulfilmentConfigResourceMapID = Substitute.For<IServiceFulfilmentConfigResourceMapID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapID, typeof(IServiceFulfilmentConfigResourceMapID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapID_IsValidServiceFulfilmentConfigResourceMapIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapID mockServiceFulfilmentConfigResourceMapID = Substitute.For<IServiceFulfilmentConfigResourceMapID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_Resource_Map_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapID.serviceFulfilmentConfigResourceMapID,  mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapID, typeof(IServiceFulfilmentConfigResourceMapID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceFulfilmentConfigResourceMapOptions

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidOrgIDInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsBelongingToOrgInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidServiceIDInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidResourceIDInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidMoneyAmountInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidMsDurationInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidServiceFulfilmentConfigIDInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceFulfilmentConfigResourceMapOptions_IsValidCurrencyInvaid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceFulfilmentConfigResourceMapOptions mockServiceFulfilmentConfigResourceMapOptions = Substitute.For<IServiceFulfilmentConfigResourceMapOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds = 6000;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount = 1;
            mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceFulfilmentConfigResourceMapOptions.orgId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.resourceId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId = 1;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockServiceFulfilmentConfigResourceMapOptions.serviceId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceFulfilmentConfigResourceMapOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockServiceFulfilmentConfigResourceMapOptions.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockServiceFulfilmentConfigResourceMapOptions.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceFulfilmentConfigResourceMapOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceFulfilmentConfigResourceMapOptions, typeof(IServiceFulfilmentConfigResourceMapOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIIsPlatform

        [TestMethod]
        public void Validation_IsValidWithIIsPlatform()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsPlatform mockIsPlatform = Substitute.For<IIsPlatform>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockIsPlatform.isPlatformSpecific = ENUM_Org_Is_Platform.NotPlatformSpecific;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockIsPlatform, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockIsPlatform, typeof(IIsPlatform));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIIsPlatform_IIsPlatformUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IIsPlatform mockIsPlatform = Substitute.For<IIsPlatform>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockIsPlatform.isPlatformSpecific = ENUM_Org_Is_Platform.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockIsPlatform, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockIsPlatform, typeof(IIsPlatform));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion                                                                     

        #region IsValidWithITempPaypalOptions

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_GUID_String(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidGuidStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb,  mockUtils,mockCoreFactory , mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory ,mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalOptions_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalOptions mockTempPaypalOptions = Substitute.For<ITempPaypalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalOptions.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockTempPaypalOptions.invoiceId = 1;
            mockTempPaypalOptions.paypalKey = "123";
            mockTempPaypalOptions.serviceOrderId = 1;
            mockTempPaypalOptions.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockTempPaypalOptions.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockTempPaypalOptions.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockTempPaypalOptions.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockTempPaypalOptions.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTempPaypalOptions, typeof(ITempPaypalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPaypalPaymentID

        [TestMethod]
        public void Validation_IsValidWithIPaypalPaymentID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaypalPaymentID mockPaypalPaymentID = Substitute.For<IPaypalPaymentID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaypalPaymentID.paypalPaymentId = "1";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaypalPaymentID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaypalPaymentID, typeof(IPaypalPaymentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPaypalPaymentID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPaypalPaymentID mockPaypalPaymentID = Substitute.For<IPaypalPaymentID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPaypalPaymentID.paypalPaymentId = "1";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPaypalPaymentID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPaypalPaymentID, typeof(IPaypalPaymentID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithITempPaypalID

        [TestMethod]
        public void Validation_IsValidWithITempPaypalID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalID mockTempPaypalID = Substitute.For<ITempPaypalID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalID.tempPaypalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TempPaypalID(mockCoreProject, mockTempPaypalID.tempPaypalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTempPaypalID, typeof(ITempPaypalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalID mockTempPaypalID = Substitute.For<ITempPaypalID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalID.tempPaypalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalID, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

             mockNumbers.Is_Valid_TempPaypalID(mockCoreProject, mockTempPaypalID.tempPaypalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTempPaypalID, typeof(ITempPaypalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithITempPaypalID_IsValidTempPaypalIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            ITempPaypalID mockTempPaypalID = Substitute.For<ITempPaypalID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockTempPaypalID.tempPaypalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockTempPaypalID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

             mockNumbers.Is_Valid_TempPaypalID(mockCoreProject, mockTempPaypalID.tempPaypalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockTempPaypalID, typeof(ITempPaypalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIGender

        [TestMethod]
        public void Validation_IsValidWithIGender()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGender mockGender = Substitute.For<IGender>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockGender.gender = ENUM_Gender.female;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGender, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockGender.gender).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb,  mockUtils, mockCoreFactory, mockGender, typeof(IGender));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGender_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGender mockGender = Substitute.For<IGender>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockGender.gender = ENUM_Gender.female;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGender, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_Gender(mockGender.gender).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockGender, typeof(IGender));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIGender_IsValidGenderInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IGender mockGender = Substitute.For<IGender>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockGender.gender = ENUM_Gender.female;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockGender, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockGender.gender).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils , mockCoreFactory, mockGender, typeof(IGender));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIAnimalID

        [TestMethod]
        public void Validation_IsValidWithIAnimalID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalID mockAnimalID = Substitute.For<IAnimalID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalID.animalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Animal_ID(mockCoreProject, mockAnimalID.animalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalID, typeof(IAnimalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalID_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalID mockAnimalID = Substitute.For<IAnimalID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockAnimalID.animalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Animal_ID(mockCoreProject, mockAnimalID.animalId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalID, typeof(IAnimalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalID_IsValidAnimalIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalID mockAnimalID = Substitute.For<IAnimalID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockAnimalID.animalId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Animal_ID(mockCoreProject, mockAnimalID.animalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalID, typeof(IAnimalID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion

        #region IsValidWithIAnimalOptions

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_AnimalBreedUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Unknown;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_AnimalSpeciesUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Unknown;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_BloodGroupUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.Unknown;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_DeceasedStatusUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.T;
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.Unknown;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_DesexedStatusUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.T;
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.Unknown;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsActiveUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Piscine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.T;
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Unknown;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,  mockCoreFactory , mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidGenderInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_InsuranceReferenceNumberInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_MainColourInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_SecondaryColourInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_MicrochipIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return false;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_PassportNumberInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIAnimalOptions_IsValidString_DateOfBirthInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IAnimalOptions mockAnimalOptions = Substitute.For<IAnimalOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockAnimalOptions.animalBreed = ENUM_Animal_Breed.Other;
            mockAnimalOptions.animalSpecies = ENUM_Animal_Species.Ovine;
            mockAnimalOptions.bloodGroup = ENUM_Blood_Group.A;
            mockAnimalOptions.dateOfBirth = "2017-01-13T10:07:59.0000000Z";
            mockAnimalOptions.deceasedDate = "2017-01-13T10:04:59.0000000Z";
            mockAnimalOptions.deceasedStatus = ENUM_Deceased_Status.dead;
            mockAnimalOptions.desexedStatus = ENUM_Desexed_Status.intact;
            mockAnimalOptions.gender = ENUM_Gender.male;
            mockAnimalOptions.insuranceReferenceNumber = "123";
            mockAnimalOptions.isActive = ENUM_Activation_State.Activated;
            mockAnimalOptions.mainColour = "Red";
            mockAnimalOptions.microchipId = "124";
            mockAnimalOptions.name = "tom";
            mockAnimalOptions.orgId = 1;
            mockAnimalOptions.passportNumber = "12444";
            mockAnimalOptions.secondaryColour = "black";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockAnimalOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockAnimalOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockAnimalOptions.name).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_Gender(mockAnimalOptions.gender).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.deceasedDate).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.insuranceReferenceNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.mainColour).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockAnimalOptions.secondaryColour).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.microchipId).Returns(x =>
            {
                return true;
            });


            mockStrings.Is_Valid_String(mockAnimalOptions.passportNumber).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockAnimalOptions.dateOfBirth).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockAnimalOptions, typeof(IAnimalOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalNoteOptions

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidLongStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteOptions_IsValidMedicalRecordIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteOptions mockMedicalNoteOptions = Substitute.For<IMedicalNoteOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteOptions.orgId = 1;
            mockMedicalNoteOptions.medicalRecordId = 1;
            mockMedicalNoteOptions.noteDescription = "Note Description";
            mockMedicalNoteOptions.medicalNoteType = ENUM_Medical_Note_Type.Behaviour;
            mockMedicalNoteOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalNoteOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockMedicalNoteOptions.createdOn_UTC).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Long_String(mockMedicalNoteOptions.noteDescription).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalNoteOptions.medicalRecordId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteOptions, typeof(IMedicalNoteOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalRecordId

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordId mockMedicalRecordId = Substitute.For<IMedicalRecordId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalRecordId.medicalRecordId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalRecordId.medicalRecordId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalRecordId, typeof(IMedicalRecordId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordId mockMedicalRecordId = Substitute.For<IMedicalRecordId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalRecordId.medicalRecordId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalRecordId.medicalRecordId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalRecordId, typeof(IMedicalRecordId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordId_IsValidMedicalRecordIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordId mockMedicalRecordId = Substitute.For<IMedicalRecordId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalRecordId.medicalRecordId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalRecord_ID(mockCoreProject, mockMedicalRecordId.medicalRecordId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalRecordId, typeof(IMedicalRecordId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalNoteId

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteId mockMedicalNoteId = Substitute.For<IMedicalNoteId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteId.medicalNoteId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalNote_ID(mockCoreProject, mockMedicalNoteId.medicalNoteId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteId, typeof(IMedicalNoteId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteId mockMedicalNoteId = Substitute.For<IMedicalNoteId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteId.medicalNoteId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MedicalNote_ID(mockCoreProject, mockMedicalNoteId.medicalNoteId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteId, typeof(IMedicalNoteId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalNoteId_IsValidMedicalNoteIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalNoteId mockMedicalNoteId = Substitute.For<IMedicalNoteId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalNoteId.medicalNoteId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalNoteId, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MedicalNote_ID(mockCoreProject, mockMedicalNoteId.medicalNoteId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalNoteId, typeof(IMedicalNoteId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIMedicalRecordOptions

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMedicalRecordOptions_IsValidAnimalIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMedicalRecordOptions mockMedicalRecordOptions = Substitute.For<IMedicalRecordOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMedicalRecordOptions.animalId = 1;
            mockMedicalRecordOptions.orgId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMedicalRecordOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockMedicalRecordOptions.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Animal_ID(mockCoreProject, mockMedicalRecordOptions.animalId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMedicalRecordOptions, typeof(IMedicalRecordOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIFileServiceFulfilmentConfigMap

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>(); 
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsValidFileIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsValidServiceFulfilmentConfigIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Activated;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockFileServiceFulfilmentConfigMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_File_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);
          
            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIFileServiceFulfilmentConfigMap_IsActiveUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IFileServiceFulfilmentConfigMap mockFileServiceFulfilmentConfigMap = Substitute.For<IFileServiceFulfilmentConfigMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId = 1;
            mockFileServiceFulfilmentConfigMap.orgId = 1;
            mockFileServiceFulfilmentConfigMap.fileId = 1;
            mockFileServiceFulfilmentConfigMap.isActive = ENUM_Activation_State.Unknown;


            // ---------- Arrange--------------

            //----------- Act -----------------


            ITrueFalse orgId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_Org_ID_Known(mockCoreProject, mockFileServiceFulfilmentConfigMap.orgId, orgId_known).Returns(x =>
            {
               
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse serviceFulfilmentConfigKnown = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_ServiceFulfilmentConfig_ID_Known(mockCoreProject, mockFileServiceFulfilmentConfigMap.serviceFulfilmentConfigId, serviceFulfilmentConfigKnown).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });

            ITrueFalse fileId_known = mockCoreFactory.TrueFalse();
            mockCoreDb.DB_Is_File_ID_Known(mockCoreProject, mockFileServiceFulfilmentConfigMap.fileId, fileId_known).Returns(x =>
            {
                
                return ENUM_DB_Status.DB_SUCCESS;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockFileServiceFulfilmentConfigMap, typeof(IFileServiceFulfilmentConfigMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIInvoiceableItemId

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemId mockInvoiceableItemId = Substitute.For<IInvoiceableItemId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockInvoiceableItemId.invoiceableItemId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_InvoiceableItem_ID(mockCoreProject, mockInvoiceableItemId.invoiceableItemId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemId, typeof(IInvoiceableItemId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemId mockInvoiceableItemId = Substitute.For<IInvoiceableItemId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockInvoiceableItemId.invoiceableItemId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_InvoiceableItem_ID(mockCoreProject, mockInvoiceableItemId.invoiceableItemId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemId, typeof(IInvoiceableItemId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceableItemId_IsValidInvoiceableItemIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceableItemId mockInvoiceableItemId = Substitute.For<IInvoiceableItemId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockInvoiceableItemId.invoiceableItemId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceableItemId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_InvoiceableItem_ID(mockCoreProject, mockInvoiceableItemId.invoiceableItemId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceableItemId, typeof(IInvoiceableItemId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithINotificationID

        [TestMethod]
        public void Validation_IsValidWithINotificationID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationID mockNotificationID = Substitute.For<INotificationID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockNotificationID.notificationId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotificationID.notificationId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotificationID, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationID_IsBelongingToOrg()
        {
            // ---------- Arrange-------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationID mockNotificationID = Substitute.For<INotificationID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockNotificationID.notificationId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationID, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotificationID.notificationId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotificationID, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotificationID_IsValidNotificationID()
        {
            // ---------- Arrange-------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotificationID mockNotificationID = Substitute.For<INotificationID>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockNotificationID.notificationId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotificationID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotificationID.notificationId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotificationID, typeof(INotificationID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithINotification

        [TestMethod]
        public void Validation_IsValidWithINotification()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidNotificationIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,  mockCoreFactory , mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidNotificationMessageInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.UnAcknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_NotificationStateUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.Unknown;
            mockNotification.notificationType = ENUM_Notification_Type.Notification;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithINotification_NotificationTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            INotification mockNotification = Substitute.For<INotification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockNotification.notificationId = 1;
            mockNotification.notificationDateTime = "2017-01-13T10:07:59.0000000Z";
            mockNotification.notificationMessage = "Message";
            mockNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockNotification.notificationType = ENUM_Notification_Type.Unknown;
            mockNotification.orgId = 1;
            mockNotification.userId = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Notification_ID(mockCoreProject, (int)mockNotification.notificationId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockNotification, typeof(INotification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIMoneyString

        [TestMethod]
        public void Validation_IsValidWithIMoneyString()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyString mockMoneyString = Substitute.For<IMoneyString>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockMoneyString.moneyString = "Monney String";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMoneyString, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMoneyString, typeof(IMoneyString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIMoneyString_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IMoneyString mockMoneyString = Substitute.For<IMoneyString>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockMoneyString.moneyString = "Monney String";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockMoneyString, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockMoneyString, typeof(IMoneyString));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIUserLanguageID

        [TestMethod]
        public void Validation_IsValidWithIUserLanguageID()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserLanguageID mockUserLanguageID = Substitute.For<IUserLanguageID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockUserLanguageID.languageKey = ENUM_SYS_LanguageKey.English;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockUserLanguageID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockUserLanguageID, typeof(IUserLanguageID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIUserLanguageID_LanguageKeyUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IUserLanguageID mockUserLanguageID = Substitute.For<IUserLanguageID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockUserLanguageID.languageKey = ENUM_SYS_LanguageKey.Unknown;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockUserLanguageID, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockUserLanguageID, typeof(IUserLanguageID));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIdOB

        [TestMethod]
        public void Validation_IsValidWithIdOB()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IdOB mockdOB = Substitute.For<IdOB>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockdOB.dateOfBirth = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockdOB, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockdOB.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockdOB, typeof(IdOB));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIdOB_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IdOB mockdOB = Substitute.For<IdOB>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockdOB.dateOfBirth = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockdOB, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockdOB.dateOfBirth).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockdOB, typeof(IdOB));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIdOB_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IdOB mockdOB = Substitute.For<IdOB>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockdOB.dateOfBirth = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockdOB, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockdOB.dateOfBirth).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockdOB, typeof(IdOB));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIRadiusInMeters

        [TestMethod]
        public void Validation_IsValidWithIRadiusInMeters()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRadiusInMeters mockRadiusInMeters = Substitute.For<IRadiusInMeters>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockRadiusInMeters.radiusInMeters = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRadiusInMeters, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockRadiusInMeters.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRadiusInMeters, typeof(IRadiusInMeters));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRadiusInMeters_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRadiusInMeters mockRadiusInMeters = Substitute.For<IRadiusInMeters>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRadiusInMeters.radiusInMeters = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRadiusInMeters, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Radius(mockRadiusInMeters.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockRadiusInMeters, typeof(IRadiusInMeters));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIRadiusInMeters_IsValidRadiusInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IRadiusInMeters mockRadiusInMeters = Substitute.For<IRadiusInMeters>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockRadiusInMeters.radiusInMeters = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockRadiusInMeters, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockRadiusInMeters.radiusInMeters).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRadiusInMeters, typeof(IRadiusInMeters));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIPageRequest

        [TestMethod]
        public void Validation_IsValidWithIPageRequest()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPageRequest, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockSystem.Is_Valid_PageRequest(mockPageRequest).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPageRequest, typeof(IPageRequest));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPageRequest_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPageRequest, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockSystem.Is_Valid_PageRequest(mockPageRequest).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockPageRequest, typeof(IPageRequest));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIPageRequest_IsValidPageRequestInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IPageRequest mockPageRequest = Substitute.For<IPageRequest>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockPageRequest.pagingStart = 1;
            mockPageRequest.pagingStop = 10;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockPageRequest, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockSystem.Is_Valid_PageRequest(mockPageRequest).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockPageRequest, typeof(IPageRequest));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIOrgOptions

        
        [TestMethod]
        public void Validation_IsValidWithIOrgOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IOrgOptions mockOrgOptions = Substitute.For<IOrgOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockOrgOptions.applicationGUID = "11223344-5566-7788-99AA-BBCCDDEEFF00";
            mockOrgOptions.creatorId = 1;
            mockOrgOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrgOptions.orgName = "orgName";
            mockOrgOptions.latitude = 1;
            mockOrgOptions.longitude = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrgOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrgOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrgOptions.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrgOptions.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockOrgOptions.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrgOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrgOptions.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockOrgOptions, typeof(IOrgOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIProductOptions

        [TestMethod]
        public void Validation_IsValidWithIProductOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory , mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidString_ProductNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIProductOptions_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IProductOptions mockProductOptions = Substitute.For<IProductOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockProductOptions.orgId = 1;
            mockProductOptions.productName = "Product Name";
            IMoneyValueComplete mockMoneyValueCompletePurchase = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompletePurchase.monetaryAmount = 1;
            mockMoneyValueCompletePurchase.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.purchasePrice = mockMoneyValueCompletePurchase;

            IMoneyValueComplete mockMoneyValueCompleteSales = Substitute.For<IMoneyValueComplete>();
            mockMoneyValueCompleteSales.monetaryAmount = 1;
            mockMoneyValueCompleteSales.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockProductOptions.salesPrice = mockMoneyValueCompleteSales;

            mockProductOptions.purchaseTaxRate = 1;

            mockProductOptions.salesTaxRate = 1;
            mockProductOptions.systemProductCode = "123";
            mockProductOptions.userProductCode = "123";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockProductOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockProductOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockProductOptions.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockProductOptions.purchaseTaxRate).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MoneyValue(mockProductOptions.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockProductOptions, typeof(IProductOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }



        #endregion

        #region IsValidWithIServiceOrderOptions

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,  mockCoreFactory, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderOptions_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderOptions mockServiceOrderOptions = Substitute.For<IServiceOrderOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockServiceOrderOptions.orgId = 1;
            mockServiceOrderOptions.appointmentId = 1;
            mockServiceOrderOptions.contactId = 1;
            mockServiceOrderOptions.monetaryAmount = 1;
            mockServiceOrderOptions.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderOptions.moneyString = "Money String";
            mockServiceOrderOptions.orderState = ENUM_SYS_Order_State.FulfilledOrder;
            mockServiceOrderOptions.performedByResourceId = 1;
            mockServiceOrderOptions.requireResourceByResourceId = 1;
            mockServiceOrderOptions.serviceId = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockServiceOrderOptions.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockServiceOrderOptions.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockServiceOrderOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockServiceOrderOptions.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockServiceOrderOptions.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockServiceOrderOptions.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory ,mockServiceOrderOptions, typeof(IServiceOrderOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion
        
        #region IsValidWithIInvoiceOptions

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIInvoiceOptions_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IInvoiceOptions mockInvoiceOptions = Substitute.For<IInvoiceOptions>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockInvoiceOptions.orgId = 1;
            mockInvoiceOptions.contactId = 1;
            mockInvoiceOptions.creatorId = 1;
            mockInvoiceOptions.createdOn_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deadline_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.deliveryDate_UTC = "2017-01-13T10:07:59.0000000Z";
            mockInvoiceOptions.invoiceState = ENUM_SYS_Invoice_State.Issued;
            mockInvoiceOptions.reference = "Reference";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockInvoiceOptions, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockInvoiceOptions.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockInvoiceOptions.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockInvoiceOptions.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockInvoiceOptions.deadline_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockInvoiceOptions, typeof(IInvoiceOptions));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIServiceOrderCompleteList

       
        [TestMethod]
        public void Validation_IsValidWithIServiceOrderCompleteList()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderCompleteList mockServiceOrderCompleteList = Substitute.For<IServiceOrderCompleteList>();

            List<IServiceOrderComplete> mockListServiceOrderComplete = Substitute.For<List<IServiceOrderComplete>>();
            IServiceOrderComplete mockServiceOrderComplete = Substitute.For<IServiceOrderComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderComplete.appointmentId = 1;
            mockServiceOrderComplete.appointmentTitle = "Title";
            mockServiceOrderComplete.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockServiceOrderComplete.contactId = 1;
            mockServiceOrderComplete.creatorId = 1;
            mockServiceOrderComplete.customerEmail = "xyz@gmail.com";
            mockServiceOrderComplete.customerFullName = "Joh Smith";
            mockServiceOrderComplete.durationMilliseconds = 60000;
            mockServiceOrderComplete.end = "2017-01-13T10:08:59.0000000Z";
            mockServiceOrderComplete.start = "2017-01-13T10:07:59.0000000Z";
            mockServiceOrderComplete.monetaryAmount = 1;
            mockServiceOrderComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderComplete.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockServiceOrderComplete.orgId = 1;
            mockServiceOrderComplete.performedByResourceId = 1;
            mockServiceOrderComplete.requireResourceByResourceId = 1;
            mockServiceOrderComplete.serviceId = 1;
            mockServiceOrderComplete.serviceOrderId = 1;
            mockServiceOrderComplete.timeZoneIANA = "America/Boise";

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            mockServiceOrderComplete.timeScaleList = mockListITSO;

            //mockServiceOrderComplete.timeScaleList = 1;
            mockListServiceOrderComplete.Add(mockServiceOrderComplete);

            mockServiceOrderCompleteList.serviceOrderList = mockListServiceOrderComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderCompleteList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderComplete.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderComplete, typeof(IServiceOrderComplete)).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockServiceOrderCompleteList, typeof(IServiceOrderCompleteList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderCompleteList_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderCompleteList mockServiceOrderCompleteList = Substitute.For<IServiceOrderCompleteList>();

            List<IServiceOrderComplete> mockListServiceOrderComplete = Substitute.For<List<IServiceOrderComplete>>();
            IServiceOrderComplete mockServiceOrderComplete = Substitute.For<IServiceOrderComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderComplete.appointmentId = 1;
            mockServiceOrderComplete.appointmentTitle = "Title";
            mockServiceOrderComplete.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockServiceOrderComplete.contactId = 1;
            mockServiceOrderComplete.creatorId = 1;
            mockServiceOrderComplete.customerEmail = "xyz@gmail.com";
            mockServiceOrderComplete.customerFullName = "Joh Smith";
            mockServiceOrderComplete.durationMilliseconds = 60000;
            mockServiceOrderComplete.end = "2017-01-13T10:08:59.0000000Z";
            mockServiceOrderComplete.start = "2017-01-13T10:07:59.0000000Z";
            mockServiceOrderComplete.monetaryAmount = 1;
            mockServiceOrderComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderComplete.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockServiceOrderComplete.orgId = 1;
            mockServiceOrderComplete.performedByResourceId = 1;
            mockServiceOrderComplete.requireResourceByResourceId = 1;
            mockServiceOrderComplete.serviceId = 1;
            mockServiceOrderComplete.serviceOrderId = 1;
            mockServiceOrderComplete.timeZoneIANA = "America/Boise";

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            mockServiceOrderComplete.timeScaleList = mockListITSO;

            //mockServiceOrderComplete.timeScaleList = 1;
            mockListServiceOrderComplete.Add(mockServiceOrderComplete);

            mockServiceOrderCompleteList.serviceOrderList = mockListServiceOrderComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderCompleteList, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderComplete, typeof(IServiceOrderComplete)).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderCompleteList, typeof(IServiceOrderCompleteList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIServiceOrderCompleteList_IsValidInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IServiceOrderCompleteList mockServiceOrderCompleteList = Substitute.For<IServiceOrderCompleteList>();

            List<IServiceOrderComplete> mockListServiceOrderComplete = Substitute.For<List<IServiceOrderComplete>>();
            IServiceOrderComplete mockServiceOrderComplete = Substitute.For<IServiceOrderComplete>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockServiceOrderComplete.appointmentId = 1;
            mockServiceOrderComplete.appointmentTitle = "Title";
            mockServiceOrderComplete.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockServiceOrderComplete.contactId = 1;
            mockServiceOrderComplete.creatorId = 1;
            mockServiceOrderComplete.customerEmail = "xyz@gmail.com";
            mockServiceOrderComplete.customerFullName = "Joh Smith";
            mockServiceOrderComplete.durationMilliseconds = 60000;
            mockServiceOrderComplete.end = "2017-01-13T10:08:59.0000000Z";
            mockServiceOrderComplete.start = "2017-01-13T10:07:59.0000000Z";
            mockServiceOrderComplete.monetaryAmount = 1;
            mockServiceOrderComplete.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockServiceOrderComplete.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockServiceOrderComplete.orgId = 1;
            mockServiceOrderComplete.performedByResourceId = 1;
            mockServiceOrderComplete.requireResourceByResourceId = 1;
            mockServiceOrderComplete.serviceId = 1;
            mockServiceOrderComplete.serviceOrderId = 1;
            mockServiceOrderComplete.timeZoneIANA = "America/Boise";

            List<ITSO> mockListITSO = Substitute.For<List<ITSO>>();
            mockServiceOrderComplete.timeScaleList = mockListITSO;

            //mockServiceOrderComplete.timeScaleList = 1;
            mockListServiceOrderComplete.Add(mockServiceOrderComplete);

            mockServiceOrderCompleteList.serviceOrderList = mockListServiceOrderComplete;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockServiceOrderCompleteList, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockServiceOrderComplete.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderComplete, typeof(IServiceOrderComplete)).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockServiceOrderCompleteList, typeof(IServiceOrderCompleteList));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcOrgAddressUserId

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();



            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcOrgAddressUserId_IsValidAddressIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcOrgAddressUserId mockDcOrgAddressUserId = Substitute.For<IDcOrgAddressUserId>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcOrgAddressUserId.addressId = 1;
            mockDcOrgAddressUserId.cmd_user_id = 1;
            mockDcOrgAddressUserId.coreProj = mockCoreProject;
            mockDcOrgAddressUserId.orgId = 1;
            mockDcOrgAddressUserId.userId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcOrgAddressUserId, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcOrgAddressUserId.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcOrgAddressUserId.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Address_ID(mockCoreProject, mockDcOrgAddressUserId.addressId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcOrgAddressUserId, typeof(IDcOrgAddressUserId));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDCCreateNotification

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsValidNotificationMessageInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return false;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_IsValidUserID_UserIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------
            
            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_NotificationStateUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "Empty";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Unknown;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_NotificationTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDCCreateNotification.notificationMessage = "Empty";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Unknown;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotification_CmdUserIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "Empty";
            mockDCCreateNotification.orgId = -1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = 1;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.userId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotificationWithUserIdZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = 1;
            mockDCCreateNotification.userId = 0;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            
            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotificationWithUserIdZero_Invalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = 1;
            mockDCCreateNotification.userId = 1;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateNotificationWithUserIdZero_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDC_Create_Notification mockDCCreateNotification = Substitute.For<IDC_Create_Notification>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateNotification.notificationMessage = "abc";
            mockDCCreateNotification.orgId = 1;
            mockDCCreateNotification.userId = 0;
            mockDCCreateNotification.coreProj = mockCoreProject;
            mockDCCreateNotification.notificationState = ENUM_Notification_State.Acknowleged;
            mockDCCreateNotification.notificationType = ENUM_Notification_Type.Message;
            mockDCCreateNotification.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateNotification, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Notification_Message(mockDCCreateNotification.notificationMessage).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateNotification.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateNotification.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateNotification, typeof(IDC_Create_Notification));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDCCreateOrgResource

        // need to add few interface in Is_Valid function
        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
             int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;
      

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidBookingOverlapInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory 
                ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidDailyUserSlotLimitInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidMsDuration_MaxExceptionDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidFutureDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidResourceNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidSlotDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidTimeAllocationTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory , mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 1122;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 12;
            mockDCCreateOrgResource.maxDailyUserSlots = 12;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resource";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCCreateOrgResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCCreateOrgResource_TimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IDCCreateOrgResource mockDCCreateOrgResource = Substitute.For<IDCCreateOrgResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCCreateOrgResource.orgId = 1;
            mockDCCreateOrgResource.userId = 0;
            mockDCCreateOrgResource.coreProj = mockCoreProject;
            mockDCCreateOrgResource.allowsOverlaps = Enum_SYS_BookingOverlap.NoOverlapping;
            mockDCCreateOrgResource.cmd_user_id = 1;
            mockDCCreateOrgResource.latitude = 1;
            mockDCCreateOrgResource.longitude = 1;
            mockDCCreateOrgResource.maxAppointmentDuration = 221;
            mockDCCreateOrgResource.maxAppointmentFutureTimeInMs = 1;
            mockDCCreateOrgResource.maxDailyUserSlots = 1;
            int resourceId = 1;
            mockDCCreateOrgResource.maxExceptionDuration = 1;
            mockDCCreateOrgResource.resourceName = "Resporce";
            mockDCCreateOrgResource.slotDuration = 900000;
            mockDCCreateOrgResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.Unknown;
            mockDCCreateOrgResource.timeZoneIANA = "America/Boise";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCCreateOrgResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCCreateOrgResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCCreateOrgResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCCreateOrgResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCCreateOrgResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDCCreateOrgResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Future_Duration(mockDCCreateOrgResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Resource_Name(mockDCCreateOrgResource.resourceName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_SlotDuration(mockDCCreateOrgResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCCreateOrgResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCCreateOrgResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCCreateOrgResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCCreateOrgResource, typeof(IDCCreateOrgResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDCUpdateResource


        // need to impliment interface in isvalid
        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidBookingOverlapInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidDailyUserSlotLimitInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidMsDuration_MaxExceptionDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidFutureDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidResourceNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidSlotDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidTimeAllocationTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDCUpdateResource_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDCUpdateResource mockDCUpdateResource = Substitute.For<IDCUpdateResource>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDCUpdateResource.orgId = 1;
            mockDCUpdateResource.userId = 0;
            mockDCUpdateResource.coreProj = mockCoreProject;
            mockDCUpdateResource.allowsOverlaps = Enum_SYS_BookingOverlap.OverLappingAllowed;
            mockDCUpdateResource.cmd_user_id = 1;
            mockDCUpdateResource.latitude = 1;
            mockDCUpdateResource.longitude = 1;
            mockDCUpdateResource.maxAppointmentDuration = 1122;
            mockDCUpdateResource.maxAppointmentFutureTimeInMs = 12;
            mockDCUpdateResource.maxDailyUserSlots = 12;
            mockDCUpdateResource.resourceId = 1;
            mockDCUpdateResource.maxExceptionDuration = 1;
            mockDCUpdateResource.resourceName = "Resource";
            mockDCUpdateResource.slotDuration = 900000;
            mockDCUpdateResource.timeAllocationType = ENUM_SYS_Resource_Time_Allocation_Type.DynamicSlots;
            mockDCUpdateResource.timeZoneIANA = string.Empty;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDCUpdateResource, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDCUpdateResource.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDCUpdateResource.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDCUpdateResource.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_BookingOverlap(mockDCUpdateResource.allowsOverlaps).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxAppointmentDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Daily_User_Slot_Limit(mockDCUpdateResource.maxDailyUserSlots).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MsDuration(mockDCUpdateResource.maxExceptionDuration).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_Future_Duration(mockDCUpdateResource.maxAppointmentFutureTimeInMs).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_Resource_Name(mockDCUpdateResource.resourceName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_SlotDuration(mockDCUpdateResource.slotDuration).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Time_AllocationType((int)mockDCUpdateResource.timeAllocationType).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDCUpdateResource.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDCUpdateResource.longitude).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDCUpdateResource, typeof(IDCUpdateResource));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateContact

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory , mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidContactTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb,  mockUtils, mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidUserTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidString_ContactFirstNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidString_ContactLastNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateContact_IsValidString_OrgNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateContact mockDcCreateContact = Substitute.For<IDcCreateContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateContact.orgId = 1;
            mockDcCreateContact.userId = 0;
            mockDcCreateContact.coreProj = mockCoreProject;
            mockDcCreateContact.cmd_user_id = 1;
            mockDcCreateContact.contactFirstName = "John";
            mockDcCreateContact.contactLastName = "Smith";
            mockDcCreateContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcCreateContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcCreateContact.emailAddress = "xyz@gmail.com";
            mockDcCreateContact.orgName = "ABC company";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcCreateContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcCreateContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcCreateContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateContact.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateContact, typeof(IDcCreateContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIDcUpdateOrgContact

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";
            mockDcUpdateOrgContact.contactId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgContact.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidEmailAddressInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidContactTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });



            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidUserTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidString_ContactFirstNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidString_ContactLastNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgContact_IsValidString_OrgNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgContact mockDcUpdateOrgContact = Substitute.For<IDcUpdateOrgContact>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgContact.orgId = 1;
            mockDcUpdateOrgContact.userId = 0;
            mockDcUpdateOrgContact.coreProj = mockCoreProject;
            mockDcUpdateOrgContact.cmd_user_id = 1;
            mockDcUpdateOrgContact.contactFirstName = "John";
            mockDcUpdateOrgContact.contactLastName = "Smith";
            mockDcUpdateOrgContact.contactTitle = Enum_SYS_User_Title.Mrs;
            mockDcUpdateOrgContact.contactType = ENUM_SYS_ContactType.Customer;
            mockDcUpdateOrgContact.emailAddress = "xyz@gmail.com";
            mockDcUpdateOrgContact.orgName = "ABC company";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgContact, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgContact.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgContact.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_EmailAddress(mockDcUpdateOrgContact.emailAddress).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ContactType((int)mockDcUpdateOrgContact.contactType).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_User_Title((int)mockDcUpdateOrgContact.contactTitle).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactFirstName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.contactLastName).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgContact.orgName).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgContact, typeof(IDcUpdateOrgContact));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateProduct

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 0;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return false;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateProduct_IsValidMoneyValueInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateProduct mockDcCreateProduct = Substitute.For<IDcCreateProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateProduct.orgId = 1;
            mockDcCreateProduct.coreProj = mockCoreProject;
            mockDcCreateProduct.cmd_user_id = 1;
            mockDcCreateProduct.purchasePrice.monetaryAmount = 0;
            mockDcCreateProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.salesPrice.monetaryAmount = 1;
            mockDcCreateProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateProduct.systemProductCode = string.Empty;
            mockDcCreateProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateProduct, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateProduct.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcCreateProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcCreateProduct.purchasePrice).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb,  mockUtils, mockCoreFactory, mockDcCreateProduct, typeof(IDcCreateProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIDcUpdateOrgProduct

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
           

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return false;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidString_SystemProductCodeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = "123";
            mockDcUpdateOrgProduct.productName = "Product Name";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.systemProductCode).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcUpdateOrgProduct.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_PurchasePriceMonetaryAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_PurchasePriceMonetaryCurrencyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_SalesPriceMonetaryCurrencyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 1;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_SalesPriceMonetaryCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_SystemProductCodeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "Product Name";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_ProductNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = string.Empty;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgProduct_ProductIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgProduct mockDcUpdateOrgProduct = Substitute.For<IDcUpdateOrgProduct>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgProduct.orgId = 1;
            mockDcUpdateOrgProduct.coreProj = mockCoreProject;
            mockDcUpdateOrgProduct.cmd_user_id = 1;
            mockDcUpdateOrgProduct.purchasePrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.purchasePrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.salesPrice.monetaryAmount = 0;
            mockDcUpdateOrgProduct.salesPrice.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgProduct.systemProductCode = string.Empty;
            mockDcUpdateOrgProduct.productName = "abc";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgProduct, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgProduct.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgProduct.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcUpdateOrgProduct.productName).Returns(x =>
            {
                return true;
            });
            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgProduct.purchaseTaxRate).Returns(x =>
            {
                return true;
            });
           mockNumbers.Is_Valid_MoneyValue(mockDcUpdateOrgProduct.purchasePrice).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgProduct, typeof(IDcUpdateOrgProduct));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgServiceOrder

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_OrgIdZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 0;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_MonetaryAmountMonetaryCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = -2;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_AppointmentIdZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 0;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_MonetaryCurrencyUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_OrderStateUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.Unknown;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;

            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_PerformedByResourceIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.RejectedOrder;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 0;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_RequireResourceByResourceIdZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.monetaryAmount = 0;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.RejectedOrder;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 0;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return false;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceOrder_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceOrder mockDcCreateOrgServiceOrder = Substitute.For<IDcCreateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceOrder.cmd_user_id = 1;
            mockDcCreateOrgServiceOrder.appointmentId = 1;
            mockDcCreateOrgServiceOrder.contactId = 1;
            mockDcCreateOrgServiceOrder.end = "2017-01-13T10:08:59.0000000Z";
            mockDcCreateOrgServiceOrder.start = "2017-01-13T10:07:59.0000000Z";
            mockDcCreateOrgServiceOrder.monetaryAmount = 1;
            mockDcCreateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcCreateOrgServiceOrder.orgId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcCreateOrgServiceOrder.serviceId = 1;
            mockDcCreateOrgServiceOrder.performedByResourceId = 1;
            mockDcCreateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcCreateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.start).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateOrgServiceOrder.end).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgServiceOrder.contactId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceOrder, typeof(IDcCreateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgServiceOrder

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_MonetaryCurrencyUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            mockDcUpdateOrgServiceOrder.monetaryAmount = 0;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;





            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_OrderStateUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            mockDcUpdateOrgServiceOrder.monetaryAmount = 0;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.Unknown;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_PerformedByResourceIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;
            mockDcUpdateOrgServiceOrder.monetaryAmount = 0;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.RejectedOrder;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 0;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;




            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });


            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            
            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceOrder_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceOrder mockDcUpdateOrgServiceOrder = Substitute.For<IDcUpdateOrgServiceOrder>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceOrder.cmd_user_id = 1;
            mockDcUpdateOrgServiceOrder.appointmentId = 1;
            mockDcUpdateOrgServiceOrder.contactId = 1;


            mockDcUpdateOrgServiceOrder.monetaryAmount = 1;
            mockDcUpdateOrgServiceOrder.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgServiceOrder.orderState = ENUM_SYS_Order_State.AwaitingPrePayment;
            mockDcUpdateOrgServiceOrder.orgId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;
            mockDcUpdateOrgServiceOrder.serviceId = 1;
            mockDcUpdateOrgServiceOrder.performedByResourceId = 1;
            mockDcUpdateOrgServiceOrder.requireResourceByResourceId = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceOrder, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            IInstantStartStop tr = Substitute.For<IInstantStartStop>();
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(tr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgServiceOrder.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.performedByResourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgServiceOrder.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcUpdateOrgServiceOrder.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return tr;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceOrder, typeof(IDcUpdateOrgServiceOrder));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb,  mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_IsValidServiceFulfilmentConfigIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_MonetaryAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = 0;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.PerformsService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_ServiceFulfilmentResourceConfigRelationshipInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Required;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfigResourceMap_ServiceFulfilmentResourceConfigRequiredOptionalInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfigResourceMap mockDcCreateOrgServiceFulfilmentConfigResourceMap = Substitute.For<IDcCreateOrgServiceFulfilmentConfigResourceMap>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds = 6000;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount = -2;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRelationship = ENUM_SYS_ServiceResource_Relationship.RequiredByService;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentResourceConfigRequiredOptional = ENUM_SYS_ServiceResource_RequiredOptional.Unknown;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id = 1;

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.orgId, mockCoreDb,  mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateOrgServiceFulfilmentConfigResourceMap.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcCreateOrgServiceFulfilmentConfigResourceMap.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfigResourceMap.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfigResourceMap, typeof(IDcCreateOrgServiceFulfilmentConfigResourceMap));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateInvoiceableItem

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid); ;


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoiceableItem_IsValidProductIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoiceableItem mockDcCreateInvoiceableItem = Substitute.For<IDcCreateInvoiceableItem>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateInvoiceableItem.monetaryAmount = -2;
            mockDcCreateInvoiceableItem.monetaryCurrency = ENUM_SYS_CurrencyOption.Unknown;
            mockDcCreateInvoiceableItem.orgId = 1;
            mockDcCreateInvoiceableItem.cmd_user_id = 1;
            mockDcCreateInvoiceableItem.invoiceId = 1;
            mockDcCreateInvoiceableItem.productId = 1;
            mockDcCreateInvoiceableItem.serviceOrderId = 0;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoiceableItem, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoiceableItem.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoiceableItem.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateInvoiceableItem.monetaryAmount).Returns(x =>
            {
                return true;
            });


            mockNumbers.Is_Valid_Currency((int)mockDcCreateInvoiceableItem.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreateInvoiceableItem.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateInvoiceableItem.invoiceId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Product_ID(mockCoreProject, mockDcCreateInvoiceableItem.productId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoiceableItem, typeof(IDcCreateInvoiceableItem));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreatePayment

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:0s7:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidServiceOrderIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreatePayment_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreatePayment mockDcCreatePayment = Substitute.For<IDcCreatePayment>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreatePayment.invoiceId = 0;
            mockDcCreatePayment.monetaryAmount = 1;
            mockDcCreatePayment.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreatePayment.orgId = 1;
            mockDcCreatePayment.serviceOrderId = 0;
            mockDcCreatePayment.paypalPaymentId = "123";
            mockDcCreatePayment.paymentType = ENUM_SYS_Payment_Type.Paypal;
            mockDcCreatePayment.paymentDate = "2017-01-13T10:07:59.0000000Z";
            mockDcCreatePayment.contactId = 1;
            mockDcCreatePayment.cmd_user_id = 1;



            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreatePayment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreatePayment.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreatePayment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreatePayment.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreatePayment.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceOrder_ID(mockCoreProject, mockDcCreatePayment.serviceOrderId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreatePayment.paymentDate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreatePayment.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreatePayment, typeof(IDcCreatePayment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        #endregion

        #region IsValidWithIDcCreateTempPaypal
        public void Validation_IsValidWithIDcCreateTempPaypal()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_GUID_String(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsValidGuidStrInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_IsValidInvoiceIDInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_CmdUserIdInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 0;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = "ABC";
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateTempPaypal_PaypalKeyInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateTempPaypal mockDcCreateTempPaypal = Substitute.For<IDcCreateTempPaypal>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateTempPaypal.invoiceId = 1;
            mockDcCreateTempPaypal.serviceOrderId = 0;
            mockDcCreateTempPaypal.cmd_user_id = 1;
            mockDcCreateTempPaypal.userId = 1;
            mockDcCreateTempPaypal.coreProj = mockCoreProject;
            mockDcCreateTempPaypal.paypalKey = string.Empty;
            mockDcCreateTempPaypal.guidStr = "11223344-5566-7788-99AA-BBCCDDEEFF00";


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateTempPaypal, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateTempPaypal.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_GUID_String(mockDcCreateTempPaypal.guidStr).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Invoice_ID(mockCoreProject, mockDcCreateTempPaypal.invoiceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,mockCoreFactory, mockDcCreateTempPaypal, typeof(IDcCreateTempPaypal));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateOrgServiceFulfilmentConfig

        
        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_AdvancedOrBasic(mockDcCreateOrgServiceFulfilmentConfig).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>();
            ICoreSc mockCoreSc = Substitute.For<ICoreSc>();
            ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();

           
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockBelong.BELONG_Org_Calendar(mockCoreProject, 1, 10, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x => { return true; });


     
            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgServiceFulfilmentConfig_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgServiceFulfilmentConfig mockDcCreateOrgServiceFulfilmentConfig = Substitute.For<IDcCreateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcCreateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgServiceFulfilmentConfig.name = "Name";
            mockDcCreateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcCreateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcCreateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcCreateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgServiceFulfilmentConfig, typeof(IDcCreateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgServiceFulfilmentConfig

        /// <summary>
        /// Need to add validation rules for few inherit interface
        /// </summary>
        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_ServiceFulfilmentConfig_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceFulfilmentConfigId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_AdvancedOrBasic(mockDcUpdateOrgServiceFulfilmentConfig).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgServiceFulfilmentConfig_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgServiceFulfilmentConfig mockDcUpdateOrgServiceFulfilmentConfig = Substitute.For<IDcUpdateOrgServiceFulfilmentConfig>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgServiceFulfilmentConfig.orgId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.coreProj = mockCoreProject;
            mockDcUpdateOrgServiceFulfilmentConfig.isActive = ENUM_Activation_State.Activated;
            mockDcUpdateOrgServiceFulfilmentConfig.name = "Name";
            mockDcUpdateOrgServiceFulfilmentConfig.numberOfRequiredResources = 0;
            mockDcUpdateOrgServiceFulfilmentConfig.serviceId = 1;
            mockDcUpdateOrgServiceFulfilmentConfig.prePaymentRequired = ENUM_SYS_PrePaymentRequired.NotRequired;


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgServiceFulfilmentConfig.name).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgServiceFulfilmentConfig.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgServiceFulfilmentConfig, typeof(IDcUpdateOrgServiceFulfilmentConfig));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }



        #endregion

        #region IsValidWithIDcCreateService

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);



            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateService_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateService mockDcCreateService = Substitute.For<IDcCreateService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateService.orgId = 1;
            mockDcCreateService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateService.taxRate = 1;
            mockDcCreateService.name = "Service";
            mockDcCreateService.description = "Service decription";
            mockDcCreateService.monetaryAmount = 10;
            mockDcCreateService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcCreateService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcCreateService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcCreateService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcCreateService.monetaryAmount, mockDcCreateService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcCreateService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcCreateService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcCreateService.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateService, typeof(IDcCreateService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateOrgService

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgService.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcUpdateOrgService.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils,  mockCoreSc, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidNameStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidDescriptionStrInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidServiceCostInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidTaxRateInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidMoneyAmountInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateOrgService_IsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateOrgService mockDcUpdateOrgService = Substitute.For<IDcUpdateOrgService>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcUpdateOrgService.orgId = 1;
            mockDcUpdateOrgService.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcUpdateOrgService.taxRate = 1;
            mockDcUpdateOrgService.name = "Service";
            mockDcUpdateOrgService.description = "Service decription";
            mockDcUpdateOrgService.monetaryAmount = 10;
            mockDcUpdateOrgService.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockDcUpdateOrgService.isPlatformSpecific = ENUM_Org_Is_Platform.YesPlatformSpecific;


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateOrgService, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateOrgService.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateOrgService.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_NameStr(mockDcUpdateOrgService.name).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DescriptionStr(mockDcUpdateOrgService.description).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_Cost(mockDcUpdateOrgService.monetaryAmount, mockDcUpdateOrgService.monetaryCurrency, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TaxRate(mockDcUpdateOrgService.taxRate).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MoneyAmount(mockDcUpdateOrgService.monetaryAmount).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockDcUpdateOrgService.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateOrgService, typeof(IDcUpdateOrgService));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateInvoice

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            


            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });
            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            
            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateInvoice_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateInvoice mockDcCreateInvoice = Substitute.For<IDcCreateInvoice>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateInvoice.orgId = 1;
            mockDcCreateInvoice.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateInvoice.creatorId = 1;
            mockDcCreateInvoice.coreProj = mockCoreProject;
            mockDcCreateInvoice.createdOn_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deadline_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.deliveryDate_UTC = "2017-01-13T10:02:59.0000000Z";
            mockDcCreateInvoice.reference = "abc";
            mockDcCreateInvoice.contactId = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateInvoice, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateInvoice.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateInvoice.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateInvoice.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcCreateInvoice.deadline_UTC).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateInvoice, typeof(IDcCreateInvoice));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcCreateOrgAddress

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();

            IIsValid mockIsValid = Substitute.For<IIsValid>();
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidContactIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_Address1Invalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_Address2Invalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_AttentionInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb , mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils,  mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_CityInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_TownInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory , mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidAddressString_ZipcodeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();
            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return false;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsValidCountryLocationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = GeneralConfig.SYSTEM_WILDCARD_INT;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 0;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_CmdUserIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 0;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_CreatorIdZero()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 1;
            mockDcCreateOrgAddress.creatorId = 0;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address1";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.OrgAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_AddressTypeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 1;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.Unknown;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Activated;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcCreateOrgAddress_IsActiveInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcCreateOrgAddress mockDcCreateOrgAddress = Substitute.For<IDcCreateOrgAddress>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcCreateOrgAddress.orgId = 1;
            mockDcCreateOrgAddress.cmd_user_id = 1;
            mockDcCreateOrgAddress.creatorId = 1;
            mockDcCreateOrgAddress.coreProj = mockCoreProject;
            mockDcCreateOrgAddress.contactId = 1;
            mockDcCreateOrgAddress.address1 = "Address";
            mockDcCreateOrgAddress.address2 = "Address2";
            mockDcCreateOrgAddress.addressType = ENUM_SYS_AddressType.UserAddress;
            mockDcCreateOrgAddress.attention = "Attention";
            mockDcCreateOrgAddress.city = "City";
            mockDcCreateOrgAddress.country = Enum_SYS_Country_Location.USA;
            mockDcCreateOrgAddress.isActive = ENUM_Activation_State.Unknown;
            mockDcCreateOrgAddress.isBillingAddress = true;
            mockDcCreateOrgAddress.town = "Town";
            mockDcCreateOrgAddress.userId = 1;
            mockDcCreateOrgAddress.zipcode = "12345";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcCreateOrgAddress, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcCreateOrgAddress.cmd_user_id, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcCreateOrgAddress.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Contact_ID(mockCoreProject, mockDcCreateOrgAddress.contactId, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address1).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Address_String(mockDcCreateOrgAddress.address2).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.attention).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.city).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.town).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockDcCreateOrgAddress.zipcode).Returns(x =>
            {
                return true;
            });

            mockEnums.Is_Valid_CountryLocation(mockDcCreateOrgAddress.country).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcCreateOrgAddress, typeof(IDcCreateOrgAddress));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcDateLatLng

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();
           
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb, mockCoreFactory ).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidDateTimeStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory ).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();



            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb,  mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidServiceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_IsValidRadiusInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";


            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = string.Empty;
            mockDcDateLatLng.end = "2017-01-13T10:07:59.0000000Z";

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcDateLatLng_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcDateLatLng mockDcDateLatLng = Substitute.For<IDcDateLatLng>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockDcDateLatLng.cmd_user_id = 1;
            mockDcDateLatLng.coreProj = mockCoreProject;
            mockDcDateLatLng.latitude = 1;
            mockDcDateLatLng.longitude = 1;
            mockDcDateLatLng.radiusInMeters = 1;
            mockDcDateLatLng.serviceId = 1;
            mockDcDateLatLng.start = "2017-01-13T10:07:59.0000000Z";
            mockDcDateLatLng.end = string.Empty;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcDateLatLng, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcDateLatLng.cmd_user_id, mockCoreDb ,mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcDateLatLng.start).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockDcDateLatLng.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockDcDateLatLng.longitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Service_ID(mockCoreProject, mockDcDateLatLng.serviceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Radius(mockDcDateLatLng.radiusInMeters).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcDateLatLng, typeof(IDcDateLatLng));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIDcUpdateAppointment

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidOrgIDInvalidInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidDateTimeString_StartInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return false;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidDateTimeString_EndInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidMsDurationInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return false;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_CheckTimeIsWithinSystemTimeBoundariesInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();


            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);

            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidAppointmentTitleInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidTimeZoneIANAInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidResourceIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidAppointmentIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidTSOIdInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_IsValidCalendarIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Update_Single_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_UpdateAppointmentTypeInvalid()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            mockDcUpdateAppointment.updateAppointmentType = ENUM_Repeat_UpdateType.Unknown;

            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });

            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIDcUpdateAppointment_UpdateAppointmentTypeNotSet()
        {
            // ---------- Arrange--------------
            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);


            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();


            IUtils mockUtils = Substitute.For<IUtils>();

            IOrgID mockOrgID = Substitute.For<IOrgID>();
            IDcUpdateAppointment mockDcUpdateAppointment = Substitute.For<IDcUpdateAppointment>();
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();


            mockDcUpdateAppointment.start = "2017-01-13T10:02:59.0000000Z";
            mockDcUpdateAppointment.end = "2017-01-13T10:07:59.0000000Z";
            mockDcUpdateAppointment.appointmentTitle = "Title";
            mockDcUpdateAppointment.durationMilliseconds = 60000;
            mockDcUpdateAppointment.orgId = 1;
            mockDcUpdateAppointment.creatorId = 1;
            mockDcUpdateAppointment.timeZoneIANA = "America/Boise";
            mockDcUpdateAppointment.appointmentId = 1;
            mockDcUpdateAppointment.appointmentType = ENUM_SYS_Appointment_Type.CalendarAppointment;
            //mockDcUpdateAppointment.updateAppointmentType = ENUM_Update_AppointmentType.Update_Tsoid;
            mockDcUpdateAppointment.cmd_user_id = 1;
            List<int> resourceIdList = Substitute.For<List<int>>();
            int resourceId = 1;
            resourceIdList.Add(resourceId);
            mockDcUpdateAppointment.resourceIdList = resourceIdList;

            List<IRepeatOptions> mockListRepeatOptions = Substitute.For<List<IRepeatOptions>>();
            IRepeatOptions mockRepeatOptions = Substitute.For<IRepeatOptions>();


            int calId = 1;
            List<int> calList = Substitute.For<List<int>>();
            calList.Add(calId);
            mockDcUpdateAppointment.calendarIdList = calList;

            mockDcUpdateAppointment.repeatRuleOptions = mockListRepeatOptions;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockDcUpdateAppointment, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockDcUpdateAppointment.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockDcUpdateAppointment.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.start).Returns(x =>
            {
                return true;
            });
            mockStrings.Is_Valid_DateTime_String(mockDcUpdateAppointment.end).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_MsDuration(mockDcUpdateAppointment.durationMilliseconds).Returns(x =>
            {
                return true;
            });

            IInstantStartStop mockIInstantStartStop = Substitute.For<IInstantStartStop>();
            mockIInstantStartStop.start = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.start).Value;
            mockIInstantStartStop.stop = InstantPattern.ExtendedIsoPattern.Parse(mockDcUpdateAppointment.end).Value;
            mockDates.CheckTimeIsWithinSystemTimeBoundaries(mockIInstantStartStop).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_Appointment_Title(mockDcUpdateAppointment.appointmentTitle, mockCoreSc).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_TimeZoneIANA(mockDcUpdateAppointment.timeZoneIANA).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Resource_ID(mockCoreProject, resourceId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockNumbers.Is_Valid_Appointment_ID(mockCoreProject, mockDcUpdateAppointment.appointmentId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockIsValid.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockRepeatOptions, typeof(IRepeatOptions)).Returns(x =>
             {
                 return true;
             });

            mockNumbers.Is_Valid_TSO_Id(mockCoreProject, mockDcUpdateAppointment.tsoId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockNumbers.Is_Valid_Calendar_ID(mockCoreProject, calId, mockCoreDb, mockCoreFactory).Returns(x =>
             {
                 return true;
             });

            mockCoreFactory.InstantStartStop().Returns(x =>
            {
                return mockIInstantStartStop;
            });
            // ---------- Arrange--------------

            //----------- Act -----------------

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockDcUpdateAppointment, typeof(IDcUpdateAppointment));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        #endregion

        #region IsValidWithIWHDValue

        [TestMethod]
        public void Validation_IsValidWithIWHDValue()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();
            
            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();
            
            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });



            

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithIsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });





            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithWidthUnitTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.Unknown;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithDepthUnitTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.Unknown;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithHeightUnitTypeUnknown()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.Unknown;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithWidthValueInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = -1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            
            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithWidthValue10000002()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = -1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithDepthValueInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = -1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithDepthValue10000002()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 10000002;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithHeightValueInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = -1;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        
        [TestMethod]
        public void Validation_IsValidWithIWHDValueWithHeightValueInvalid10000002()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IWHDValue mockWHDValue = Substitute.For<IWHDValue>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();
            IOrgID mockOrgID = Substitute.For<IOrgID>();

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockWHDValue.widthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.widthValue = 1;
            mockWHDValue.depthUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.depthValue = 1;
            mockWHDValue.heightUnitType = Measurement_Unit_Type.cm;
            mockWHDValue.heightValue = 10000002;

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockWHDValue, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockWHDValue, typeof(IWHDValue));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }
        #endregion


        #region IsValidWithIOrg

        [TestMethod]
        public void Validation_IsValidWithIOrg()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;
           

            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------
            
            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });
            
            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(true, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsBelongingToOrgInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsValidOrgIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsValidUserIDInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsValidLatitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsValidLongitudeInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsValidIsValidStringOrgNameInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return false;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }

        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsValidIsValidCurrencyInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return false;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return true;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }


        [TestMethod]
        public void Validation_IsValidWithIOrgWithIsValidApplicationGUIDIsValidStringInvalid()
        {
            // ---------- Arrange--------------

            IValidationBelong mockBelong = Substitute.For<IValidationBelong>();
            IValidationDates mockDates = Substitute.For<IValidationDates>();
            IValidationEnums mockEnums = Substitute.For<IValidationEnums>();
            IValidationInterfaces mockInterfaces = Substitute.For<IValidationInterfaces>();
            IValidationLocation mockLocation = Substitute.For<IValidationLocation>();
            IValidationNumbers mockNumbers = Substitute.For<IValidationNumbers>();
            IValidationStrings mockStrings = Substitute.For<IValidationStrings>();
            IValidationSystem mockSystem = Substitute.For<IValidationSystem>();
            IValidation mockValid = Substitute.For<IValidation>();
            IIsValid mockIsValid = Substitute.For<IIsValid>();
            IOrg mockOrg = Substitute.For<IOrg>();

            Validation Validation = new Validation(mockBelong, mockDates, mockEnums, mockInterfaces, mockLocation, mockNumbers, mockStrings, mockSystem, mockIsValid);
            ICoreProject mockCoreProject = Substitute.For<ICoreProject>(); ICoreSc mockCoreSc = Substitute.For<ICoreSc>(); ICoreDatabase mockCoreDb = Substitute.For<ICoreDatabase>();
            IUtils mockUtils = Substitute.For<IUtils>();

            mockOrg.orgId = 1;
            mockOrg.creatorId = 2;
            mockOrg.latitude = 3;
            mockOrg.longitude = 4;
            mockOrg.orgName = "orgName";
            mockOrg.monetaryCurrency = ENUM_SYS_CurrencyOption.USD;
            mockOrg.applicationGUID = "123";
            mockOrg.yId = 1;
            mockOrg.isClaimed = ENUM_Is_Claimed.Claimed;
            mockOrg.subscriptionDefinitionId = 0;
            //mockOrg.businessType = Enum_Business_Type.Unknown;


            IFactoryCore mockCoreFactory = Substitute.For<IFactoryCore>();

            // ---------- Arrange--------------

            //----------- Act -----------------

            mockBelong.Is_Belonging_To_Org(mockCoreProject, mockOrg, mockUtils, mockCoreSc, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Org_ID(mockCoreProject, mockOrg.orgId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_User_ID(mockCoreProject, mockOrg.creatorId, mockCoreDb, mockCoreFactory).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Latitude(mockOrg.latitude).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Longitude(mockOrg.longitude).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.orgName).Returns(x =>
            {
                return true;
            });

            mockNumbers.Is_Valid_Currency((int)mockOrg.monetaryCurrency).Returns(x =>
            {
                return true;
            });

            mockStrings.Is_Valid_String(mockOrg.applicationGUID).Returns(x =>
            {
                return false;
            });

            bool returnValue = Validation.Is_Valid(mockCoreProject, mockCoreSc, mockCoreDb, mockUtils, mockCoreFactory, mockOrg, typeof(IOrg));

            //----------- Act -----------------

            //---------- Assert----------------

            Assert.AreEqual(false, returnValue);

            //---------- Assert----------------
        }   

        #endregion

        #endregion
    }
}